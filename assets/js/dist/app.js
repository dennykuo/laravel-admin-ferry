/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/alpine-magic-helpers/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/alpine-magic-helpers/dist/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"./node_modules/process/browser.js\");\n(function (global, factory) {\n     true ? module.exports = factory() :\n    0;\n}(this, (function () { 'use strict';\n\n    var checkForAlpine = function checkForAlpine() {\n      if (!window.Alpine) {\n        throw new Error('[Magic Helpers] Alpine is required for the magic helpers to function correctly.');\n      }\n\n      if (!window.Alpine.version || !isValidVersion('2.5.0', window.Alpine.version)) {\n        throw new Error('Invalid Alpine version. Please use Alpine version 2.5.0 or above');\n      }\n    };\n    var syncWithObservedComponent = function syncWithObservedComponent(data, observedComponent, callback) {\n      if (!observedComponent.getAttribute('x-bind:data-last-refresh')) {\n        observedComponent.setAttribute('x-bind:data-last-refresh', 'Date.now()');\n      }\n\n      var handler = function handler(scope) {\n        if (scope === void 0) {\n          scope = null;\n        }\n\n        return {\n          get: function get(target, key) {\n            var _observedComponent$__;\n\n            if (target[key] !== null && typeof target[key] === 'object') {\n              var path = scope ? scope + \".\" + key : key;\n              return new Proxy(target[key], handler(path));\n            } // We bind the scope only if the observed component is ready.\n            // Most of the time, the unwrapped data is enough\n\n\n            if (typeof target[key] === 'function' && observedComponent.__x) {\n              return target[key].bind(observedComponent.__x.$data);\n            } // If scope is null, we are at root level so when target[key] is not defined\n            // we try to look for observedComponent.__x.$data[key] to check if a magic\n            // helper/property exists\n\n\n            if (scope === null && !target[key] && observedComponent != null && (_observedComponent$__ = observedComponent.__x) != null && _observedComponent$__.$data[key]) {\n              return observedComponent.__x.$data[key];\n            }\n\n            return target[key];\n          },\n          set: function set(_target, key, value) {\n            if (!observedComponent.__x) {\n              throw new Error('Error communicating with observed component');\n            }\n\n            var path = scope ? scope + \".\" + key : key;\n            callback.call(observedComponent, observedComponent.__x.$data, path, value);\n            return true;\n          }\n        };\n      };\n\n      return new Proxy(data, handler());\n    };\n    var updateOnMutation = function updateOnMutation(componentBeingObserved, callback) {\n      if (!componentBeingObserved.getAttribute('x-bind:data-last-refresh')) {\n        componentBeingObserved.setAttribute('x-bind:data-last-refresh', 'Date.now()');\n      }\n\n      var observer = new MutationObserver(function (mutations) {\n        for (var i = 0; i < mutations.length; i++) {\n          var mutatedComponent = mutations[i].target.closest('[x-data]');\n          if (mutatedComponent && !mutatedComponent.isSameNode(componentBeingObserved)) continue;\n          callback();\n          return;\n        }\n      });\n      observer.observe(componentBeingObserved, {\n        attributes: true,\n        childList: true,\n        subtree: true\n      });\n    }; // Borrowed from https://stackoverflow.com/a/54733755/1437789\n\n    var objectSetDeep = function objectSetDeep(object, path, value) {\n      path = path.toString().match(/[^.[\\]]+/g) || []; // Iterate all of them except the last one\n\n      path.slice(0, -1).reduce(function (a, currentKey, index) {\n        // If the key does not exist or its value is not an object, create/override the key\n        if (Object(a[currentKey]) !== a[currentKey]) {\n          // Is the next key a potential array-index?\n          a[currentKey] = Math.abs(path[index + 1]) >> 0 === +path[index + 1] ? [] // Yes: assign a new array object\n          : {}; // No: assign a new plain object\n        }\n\n        return a[currentKey];\n      }, object)[path[path.length - 1]] = value; // Finally assign the value to the last key\n\n      return object;\n    }; // Returns component data if Alpine has made it available, otherwise computes it with saferEval()\n\n    var componentData = function componentData(component, properties) {\n      var data = component.__x ? component.__x.getUnobservedData() : saferEval(component.getAttribute('x-data'), component);\n\n      if (properties) {\n        properties = Array.isArray(properties) ? properties : [properties];\n        return properties.reduce(function (object, key) {\n          object[key] = data[key];\n          return object;\n        }, {});\n      }\n\n      return data;\n    };\n\n    function isValidVersion(required, current) {\n      var requiredArray = required.split('.');\n      var currentArray = current.split('.');\n\n      for (var i = 0; i < requiredArray.length; i++) {\n        if (!currentArray[i] || parseInt(currentArray[i]) < parseInt(requiredArray[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function saferEval(expression, dataContext, additionalHelperVariables) {\n      if (additionalHelperVariables === void 0) {\n        additionalHelperVariables = {};\n      }\n\n      if (typeof expression === 'function') {\n        return expression.call(dataContext);\n      } // eslint-disable-next-line no-new-func\n\n\n      return new Function(['$data'].concat(Object.keys(additionalHelperVariables)), \"var __alpine_result; with($data) { __alpine_result = \" + expression + \" }; return __alpine_result\").apply(void 0, [dataContext].concat(Object.values(additionalHelperVariables)));\n    } // Returns a dummy proxy that supports multiple levels of nesting and always prints/returns an empty string.\n\n\n    function getNoopProxy() {\n      var handler = {\n        get: function get(target, key) {\n          return new Proxy(function () {\n            return '';\n          }, handler);\n        }\n      };\n      return new Proxy(function () {\n        return '';\n      }, handler);\n    } // Continuously check the observed component until it's ready.\n    // It returns an object that always spits out an empty string while waiting (See getNoopProxy).\n\n    function waitUntilReady(componentBeingObserved, component, callback) {\n      if (!componentBeingObserved.__x) {\n        window.requestAnimationFrame(function () {\n          return component.__x.updateElements(component);\n        });\n        return getNoopProxy();\n      }\n\n      return callback();\n    }\n    function parseHtmlAttribute(_ref) {\n      var name = _ref.name,\n          value = _ref.value;\n      var xAttrRE = /^x-([a-zA-Z-]*)\\b/;\n      var typeMatch = name.match(xAttrRE);\n      var valueMatch = name.match(/:([a-zA-Z0-9\\-:]+)/);\n      var modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n      return {\n        type: typeMatch ? typeMatch[1] : null,\n        value: valueMatch ? valueMatch[1] : null,\n        modifiers: modifiers.map(function (i) {\n          return i.replace('.', '');\n        }),\n        expression: value\n      };\n    }\n\n    var AlpineComponentMagicMethod = {\n      start: function start() {\n        checkForAlpine();\n        Alpine.addMagicProperty('parent', function ($el) {\n          if (typeof $el.$parent !== 'undefined') return $el.$parent;\n          var parentComponent = $el.parentNode.closest('[x-data]');\n          if (!parentComponent) throw new Error('Parent component not found'); // If the parent component is not ready, we return a dummy proxy\n          // that always prints out an empty string and we check again on the next frame\n          // We are de facto deferring the value for a few ms but final users\n          // shouldn't notice the delay\n\n          return waitUntilReady(parentComponent, $el, function () {\n            $el.$parent = syncWithObservedComponent(componentData(parentComponent), parentComponent, objectSetDeep);\n            updateOnMutation(parentComponent, function () {\n              $el.$parent = syncWithObservedComponent(parentComponent.__x.getUnobservedData(), parentComponent, objectSetDeep);\n\n              $el.__x.updateElements($el);\n            });\n            return $el.$parent;\n          });\n        });\n        Alpine.addMagicProperty('component', function ($el) {\n          return function (componentName) {\n            var _this = this;\n\n            if (typeof this[componentName] !== 'undefined') return this[componentName];\n            var componentBeingObserved = document.querySelector(\"[x-data][x-id=\\\"\" + componentName + \"\\\"], [x-data]#\" + componentName);\n            if (!componentBeingObserved) throw new Error('Component not found'); // If the observed component is not ready, we return a dummy proxy\n            // that always prints out an empty string and we check again on the next frame\n            // We are de facto deferring the value for a few ms but final users\n            // shouldn't notice the delay\n\n            return waitUntilReady(componentBeingObserved, $el, function () {\n              _this[componentName] = syncWithObservedComponent(componentData(componentBeingObserved), componentBeingObserved, objectSetDeep);\n              updateOnMutation(componentBeingObserved, function () {\n                _this[componentName] = syncWithObservedComponent(componentBeingObserved.__x.getUnobservedData(), componentBeingObserved, objectSetDeep);\n\n                $el.__x.updateElements($el);\n              });\n              return _this[componentName];\n            });\n          };\n        });\n      }\n    };\n\n    var alpine = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      alpine(callback);\n      AlpineComponentMagicMethod.start();\n    };\n\n    var bind = function bind(fn, thisArg) {\n      return function wrap() {\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i];\n        }\n        return fn.apply(thisArg, args);\n      };\n    };\n\n    /*global toString:true*/\n\n    // utils is a library of generic helper functions non-specific to axios\n\n    var toString = Object.prototype.toString;\n\n    /**\n     * Determine if a value is an Array\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is an Array, otherwise false\n     */\n    function isArray(val) {\n      return toString.call(val) === '[object Array]';\n    }\n\n    /**\n     * Determine if a value is undefined\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if the value is undefined, otherwise false\n     */\n    function isUndefined(val) {\n      return typeof val === 'undefined';\n    }\n\n    /**\n     * Determine if a value is a Buffer\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a Buffer, otherwise false\n     */\n    function isBuffer(val) {\n      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n    }\n\n    /**\n     * Determine if a value is an ArrayBuffer\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n     */\n    function isArrayBuffer(val) {\n      return toString.call(val) === '[object ArrayBuffer]';\n    }\n\n    /**\n     * Determine if a value is a FormData\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is an FormData, otherwise false\n     */\n    function isFormData(val) {\n      return (typeof FormData !== 'undefined') && (val instanceof FormData);\n    }\n\n    /**\n     * Determine if a value is a view on an ArrayBuffer\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n     */\n    function isArrayBufferView(val) {\n      var result;\n      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n        result = ArrayBuffer.isView(val);\n      } else {\n        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n      }\n      return result;\n    }\n\n    /**\n     * Determine if a value is a String\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a String, otherwise false\n     */\n    function isString(val) {\n      return typeof val === 'string';\n    }\n\n    /**\n     * Determine if a value is a Number\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a Number, otherwise false\n     */\n    function isNumber(val) {\n      return typeof val === 'number';\n    }\n\n    /**\n     * Determine if a value is an Object\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is an Object, otherwise false\n     */\n    function isObject(val) {\n      return val !== null && typeof val === 'object';\n    }\n\n    /**\n     * Determine if a value is a plain Object\n     *\n     * @param {Object} val The value to test\n     * @return {boolean} True if value is a plain Object, otherwise false\n     */\n    function isPlainObject(val) {\n      if (toString.call(val) !== '[object Object]') {\n        return false;\n      }\n\n      var prototype = Object.getPrototypeOf(val);\n      return prototype === null || prototype === Object.prototype;\n    }\n\n    /**\n     * Determine if a value is a Date\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a Date, otherwise false\n     */\n    function isDate(val) {\n      return toString.call(val) === '[object Date]';\n    }\n\n    /**\n     * Determine if a value is a File\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a File, otherwise false\n     */\n    function isFile(val) {\n      return toString.call(val) === '[object File]';\n    }\n\n    /**\n     * Determine if a value is a Blob\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a Blob, otherwise false\n     */\n    function isBlob(val) {\n      return toString.call(val) === '[object Blob]';\n    }\n\n    /**\n     * Determine if a value is a Function\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a Function, otherwise false\n     */\n    function isFunction(val) {\n      return toString.call(val) === '[object Function]';\n    }\n\n    /**\n     * Determine if a value is a Stream\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a Stream, otherwise false\n     */\n    function isStream(val) {\n      return isObject(val) && isFunction(val.pipe);\n    }\n\n    /**\n     * Determine if a value is a URLSearchParams object\n     *\n     * @param {Object} val The value to test\n     * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n     */\n    function isURLSearchParams(val) {\n      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n    }\n\n    /**\n     * Trim excess whitespace off the beginning and end of a string\n     *\n     * @param {String} str The String to trim\n     * @returns {String} The String freed of excess whitespace\n     */\n    function trim(str) {\n      return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n    }\n\n    /**\n     * Determine if we're running in a standard browser environment\n     *\n     * This allows axios to run in a web worker, and react-native.\n     * Both environments support XMLHttpRequest, but not fully standard globals.\n     *\n     * web workers:\n     *  typeof window -> undefined\n     *  typeof document -> undefined\n     *\n     * react-native:\n     *  navigator.product -> 'ReactNative'\n     * nativescript\n     *  navigator.product -> 'NativeScript' or 'NS'\n     */\n    function isStandardBrowserEnv() {\n      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                               navigator.product === 'NativeScript' ||\n                                               navigator.product === 'NS')) {\n        return false;\n      }\n      return (\n        typeof window !== 'undefined' &&\n        typeof document !== 'undefined'\n      );\n    }\n\n    /**\n     * Iterate over an Array or an Object invoking a function for each item.\n     *\n     * If `obj` is an Array callback will be called passing\n     * the value, index, and complete array for each item.\n     *\n     * If 'obj' is an Object callback will be called passing\n     * the value, key, and complete object for each property.\n     *\n     * @param {Object|Array} obj The object to iterate\n     * @param {Function} fn The callback to invoke for each item\n     */\n    function forEach(obj, fn) {\n      // Don't bother if no value provided\n      if (obj === null || typeof obj === 'undefined') {\n        return;\n      }\n\n      // Force an array if not already something iterable\n      if (typeof obj !== 'object') {\n        /*eslint no-param-reassign:0*/\n        obj = [obj];\n      }\n\n      if (isArray(obj)) {\n        // Iterate over array values\n        for (var i = 0, l = obj.length; i < l; i++) {\n          fn.call(null, obj[i], i, obj);\n        }\n      } else {\n        // Iterate over object keys\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn.call(null, obj[key], key, obj);\n          }\n        }\n      }\n    }\n\n    /**\n     * Accepts varargs expecting each argument to be an object, then\n     * immutably merges the properties of each object and returns result.\n     *\n     * When multiple objects contain the same key the later object in\n     * the arguments list will take precedence.\n     *\n     * Example:\n     *\n     * ```js\n     * var result = merge({foo: 123}, {foo: 456});\n     * console.log(result.foo); // outputs 456\n     * ```\n     *\n     * @param {Object} obj1 Object to merge\n     * @returns {Object} Result of all merge properties\n     */\n    function merge(/* obj1, obj2, obj3, ... */) {\n      var result = {};\n      function assignValue(val, key) {\n        if (isPlainObject(result[key]) && isPlainObject(val)) {\n          result[key] = merge(result[key], val);\n        } else if (isPlainObject(val)) {\n          result[key] = merge({}, val);\n        } else if (isArray(val)) {\n          result[key] = val.slice();\n        } else {\n          result[key] = val;\n        }\n      }\n\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        forEach(arguments[i], assignValue);\n      }\n      return result;\n    }\n\n    /**\n     * Extends object a by mutably adding to it the properties of object b.\n     *\n     * @param {Object} a The object to be extended\n     * @param {Object} b The object to copy properties from\n     * @param {Object} thisArg The object to bind function to\n     * @return {Object} The resulting value of object a\n     */\n    function extend(a, b, thisArg) {\n      forEach(b, function assignValue(val, key) {\n        if (thisArg && typeof val === 'function') {\n          a[key] = bind(val, thisArg);\n        } else {\n          a[key] = val;\n        }\n      });\n      return a;\n    }\n\n    /**\n     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n     *\n     * @param {string} content with BOM\n     * @return {string} content value without BOM\n     */\n    function stripBOM(content) {\n      if (content.charCodeAt(0) === 0xFEFF) {\n        content = content.slice(1);\n      }\n      return content;\n    }\n\n    var utils = {\n      isArray: isArray,\n      isArrayBuffer: isArrayBuffer,\n      isBuffer: isBuffer,\n      isFormData: isFormData,\n      isArrayBufferView: isArrayBufferView,\n      isString: isString,\n      isNumber: isNumber,\n      isObject: isObject,\n      isPlainObject: isPlainObject,\n      isUndefined: isUndefined,\n      isDate: isDate,\n      isFile: isFile,\n      isBlob: isBlob,\n      isFunction: isFunction,\n      isStream: isStream,\n      isURLSearchParams: isURLSearchParams,\n      isStandardBrowserEnv: isStandardBrowserEnv,\n      forEach: forEach,\n      merge: merge,\n      extend: extend,\n      trim: trim,\n      stripBOM: stripBOM\n    };\n\n    function encode(val) {\n      return encodeURIComponent(val).\n        replace(/%3A/gi, ':').\n        replace(/%24/g, '$').\n        replace(/%2C/gi, ',').\n        replace(/%20/g, '+').\n        replace(/%5B/gi, '[').\n        replace(/%5D/gi, ']');\n    }\n\n    /**\n     * Build a URL by appending params to the end\n     *\n     * @param {string} url The base of the url (e.g., http://www.google.com)\n     * @param {object} [params] The params to be appended\n     * @returns {string} The formatted url\n     */\n    var buildURL = function buildURL(url, params, paramsSerializer) {\n      /*eslint no-param-reassign:0*/\n      if (!params) {\n        return url;\n      }\n\n      var serializedParams;\n      if (paramsSerializer) {\n        serializedParams = paramsSerializer(params);\n      } else if (utils.isURLSearchParams(params)) {\n        serializedParams = params.toString();\n      } else {\n        var parts = [];\n\n        utils.forEach(params, function serialize(val, key) {\n          if (val === null || typeof val === 'undefined') {\n            return;\n          }\n\n          if (utils.isArray(val)) {\n            key = key + '[]';\n          } else {\n            val = [val];\n          }\n\n          utils.forEach(val, function parseValue(v) {\n            if (utils.isDate(v)) {\n              v = v.toISOString();\n            } else if (utils.isObject(v)) {\n              v = JSON.stringify(v);\n            }\n            parts.push(encode(key) + '=' + encode(v));\n          });\n        });\n\n        serializedParams = parts.join('&');\n      }\n\n      if (serializedParams) {\n        var hashmarkIndex = url.indexOf('#');\n        if (hashmarkIndex !== -1) {\n          url = url.slice(0, hashmarkIndex);\n        }\n\n        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n      }\n\n      return url;\n    };\n\n    function InterceptorManager() {\n      this.handlers = [];\n    }\n\n    /**\n     * Add a new interceptor to the stack\n     *\n     * @param {Function} fulfilled The function to handle `then` for a `Promise`\n     * @param {Function} rejected The function to handle `reject` for a `Promise`\n     *\n     * @return {Number} An ID used to remove interceptor later\n     */\n    InterceptorManager.prototype.use = function use(fulfilled, rejected) {\n      this.handlers.push({\n        fulfilled: fulfilled,\n        rejected: rejected\n      });\n      return this.handlers.length - 1;\n    };\n\n    /**\n     * Remove an interceptor from the stack\n     *\n     * @param {Number} id The ID that was returned by `use`\n     */\n    InterceptorManager.prototype.eject = function eject(id) {\n      if (this.handlers[id]) {\n        this.handlers[id] = null;\n      }\n    };\n\n    /**\n     * Iterate over all the registered interceptors\n     *\n     * This method is particularly useful for skipping over any\n     * interceptors that may have become `null` calling `eject`.\n     *\n     * @param {Function} fn The function to call for each interceptor\n     */\n    InterceptorManager.prototype.forEach = function forEach(fn) {\n      utils.forEach(this.handlers, function forEachHandler(h) {\n        if (h !== null) {\n          fn(h);\n        }\n      });\n    };\n\n    var InterceptorManager_1 = InterceptorManager;\n\n    /**\n     * Transform the data for a request or a response\n     *\n     * @param {Object|String} data The data to be transformed\n     * @param {Array} headers The headers for the request or response\n     * @param {Array|Function} fns A single function or Array of functions\n     * @returns {*} The resulting transformed data\n     */\n    var transformData = function transformData(data, headers, fns) {\n      /*eslint no-param-reassign:0*/\n      utils.forEach(fns, function transform(fn) {\n        data = fn(data, headers);\n      });\n\n      return data;\n    };\n\n    var isCancel = function isCancel(value) {\n      return !!(value && value.__CANCEL__);\n    };\n\n    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {\n      utils.forEach(headers, function processHeader(value, name) {\n        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n          headers[normalizedName] = value;\n          delete headers[name];\n        }\n      });\n    };\n\n    /**\n     * Update an Error with the specified config, error code, and response.\n     *\n     * @param {Error} error The error to update.\n     * @param {Object} config The config.\n     * @param {string} [code] The error code (for example, 'ECONNABORTED').\n     * @param {Object} [request] The request.\n     * @param {Object} [response] The response.\n     * @returns {Error} The error.\n     */\n    var enhanceError = function enhanceError(error, config, code, request, response) {\n      error.config = config;\n      if (code) {\n        error.code = code;\n      }\n\n      error.request = request;\n      error.response = response;\n      error.isAxiosError = true;\n\n      error.toJSON = function toJSON() {\n        return {\n          // Standard\n          message: this.message,\n          name: this.name,\n          // Microsoft\n          description: this.description,\n          number: this.number,\n          // Mozilla\n          fileName: this.fileName,\n          lineNumber: this.lineNumber,\n          columnNumber: this.columnNumber,\n          stack: this.stack,\n          // Axios\n          config: this.config,\n          code: this.code\n        };\n      };\n      return error;\n    };\n\n    /**\n     * Create an Error with the specified message, config, error code, request and response.\n     *\n     * @param {string} message The error message.\n     * @param {Object} config The config.\n     * @param {string} [code] The error code (for example, 'ECONNABORTED').\n     * @param {Object} [request] The request.\n     * @param {Object} [response] The response.\n     * @returns {Error} The created error.\n     */\n    var createError = function createError(message, config, code, request, response) {\n      var error = new Error(message);\n      return enhanceError(error, config, code, request, response);\n    };\n\n    /**\n     * Resolve or reject a Promise based on response status.\n     *\n     * @param {Function} resolve A function that resolves the promise.\n     * @param {Function} reject A function that rejects the promise.\n     * @param {object} response The response.\n     */\n    var settle = function settle(resolve, reject, response) {\n      var validateStatus = response.config.validateStatus;\n      if (!response.status || !validateStatus || validateStatus(response.status)) {\n        resolve(response);\n      } else {\n        reject(createError(\n          'Request failed with status code ' + response.status,\n          response.config,\n          null,\n          response.request,\n          response\n        ));\n      }\n    };\n\n    var cookies = (\n      utils.isStandardBrowserEnv() ?\n\n      // Standard browser envs support document.cookie\n        (function standardBrowserEnv() {\n          return {\n            write: function write(name, value, expires, path, domain, secure) {\n              var cookie = [];\n              cookie.push(name + '=' + encodeURIComponent(value));\n\n              if (utils.isNumber(expires)) {\n                cookie.push('expires=' + new Date(expires).toGMTString());\n              }\n\n              if (utils.isString(path)) {\n                cookie.push('path=' + path);\n              }\n\n              if (utils.isString(domain)) {\n                cookie.push('domain=' + domain);\n              }\n\n              if (secure === true) {\n                cookie.push('secure');\n              }\n\n              document.cookie = cookie.join('; ');\n            },\n\n            read: function read(name) {\n              var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n              return (match ? decodeURIComponent(match[3]) : null);\n            },\n\n            remove: function remove(name) {\n              this.write(name, '', Date.now() - 86400000);\n            }\n          };\n        })() :\n\n      // Non standard browser env (web workers, react-native) lack needed support.\n        (function nonStandardBrowserEnv() {\n          return {\n            write: function write() {},\n            read: function read() { return null; },\n            remove: function remove() {}\n          };\n        })()\n    );\n\n    /**\n     * Determines whether the specified URL is absolute\n     *\n     * @param {string} url The URL to test\n     * @returns {boolean} True if the specified URL is absolute, otherwise false\n     */\n    var isAbsoluteURL = function isAbsoluteURL(url) {\n      // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n      // by any combination of letters, digits, plus, period, or hyphen.\n      return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n    };\n\n    /**\n     * Creates a new URL by combining the specified URLs\n     *\n     * @param {string} baseURL The base URL\n     * @param {string} relativeURL The relative URL\n     * @returns {string} The combined URL\n     */\n    var combineURLs = function combineURLs(baseURL, relativeURL) {\n      return relativeURL\n        ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n        : baseURL;\n    };\n\n    /**\n     * Creates a new URL by combining the baseURL with the requestedURL,\n     * only when the requestedURL is not already an absolute URL.\n     * If the requestURL is absolute, this function returns the requestedURL untouched.\n     *\n     * @param {string} baseURL The base URL\n     * @param {string} requestedURL Absolute or relative URL to combine\n     * @returns {string} The combined full path\n     */\n    var buildFullPath = function buildFullPath(baseURL, requestedURL) {\n      if (baseURL && !isAbsoluteURL(requestedURL)) {\n        return combineURLs(baseURL, requestedURL);\n      }\n      return requestedURL;\n    };\n\n    // Headers whose duplicates are ignored by node\n    // c.f. https://nodejs.org/api/http.html#http_message_headers\n    var ignoreDuplicateOf = [\n      'age', 'authorization', 'content-length', 'content-type', 'etag',\n      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n      'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n      'referer', 'retry-after', 'user-agent'\n    ];\n\n    /**\n     * Parse headers into an object\n     *\n     * ```\n     * Date: Wed, 27 Aug 2014 08:58:49 GMT\n     * Content-Type: application/json\n     * Connection: keep-alive\n     * Transfer-Encoding: chunked\n     * ```\n     *\n     * @param {String} headers Headers needing to be parsed\n     * @returns {Object} Headers parsed into an object\n     */\n    var parseHeaders = function parseHeaders(headers) {\n      var parsed = {};\n      var key;\n      var val;\n      var i;\n\n      if (!headers) { return parsed; }\n\n      utils.forEach(headers.split('\\n'), function parser(line) {\n        i = line.indexOf(':');\n        key = utils.trim(line.substr(0, i)).toLowerCase();\n        val = utils.trim(line.substr(i + 1));\n\n        if (key) {\n          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n            return;\n          }\n          if (key === 'set-cookie') {\n            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n          } else {\n            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n          }\n        }\n      });\n\n      return parsed;\n    };\n\n    var isURLSameOrigin = (\n      utils.isStandardBrowserEnv() ?\n\n      // Standard browser envs have full support of the APIs needed to test\n      // whether the request URL is of the same origin as current location.\n        (function standardBrowserEnv() {\n          var msie = /(msie|trident)/i.test(navigator.userAgent);\n          var urlParsingNode = document.createElement('a');\n          var originURL;\n\n          /**\n        * Parse a URL to discover it's components\n        *\n        * @param {String} url The URL to be parsed\n        * @returns {Object}\n        */\n          function resolveURL(url) {\n            var href = url;\n\n            if (msie) {\n            // IE needs attribute set twice to normalize properties\n              urlParsingNode.setAttribute('href', href);\n              href = urlParsingNode.href;\n            }\n\n            urlParsingNode.setAttribute('href', href);\n\n            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n            return {\n              href: urlParsingNode.href,\n              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n              host: urlParsingNode.host,\n              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n              hostname: urlParsingNode.hostname,\n              port: urlParsingNode.port,\n              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                urlParsingNode.pathname :\n                '/' + urlParsingNode.pathname\n            };\n          }\n\n          originURL = resolveURL(window.location.href);\n\n          /**\n        * Determine if a URL shares the same origin as the current location\n        *\n        * @param {String} requestURL The URL to test\n        * @returns {boolean} True if URL shares the same origin, otherwise false\n        */\n          return function isURLSameOrigin(requestURL) {\n            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n            return (parsed.protocol === originURL.protocol &&\n                parsed.host === originURL.host);\n          };\n        })() :\n\n      // Non standard browser envs (web workers, react-native) lack needed support.\n        (function nonStandardBrowserEnv() {\n          return function isURLSameOrigin() {\n            return true;\n          };\n        })()\n    );\n\n    var xhr = function xhrAdapter(config) {\n      return new Promise(function dispatchXhrRequest(resolve, reject) {\n        var requestData = config.data;\n        var requestHeaders = config.headers;\n\n        if (utils.isFormData(requestData)) {\n          delete requestHeaders['Content-Type']; // Let the browser set it\n        }\n\n        var request = new XMLHttpRequest();\n\n        // HTTP basic authentication\n        if (config.auth) {\n          var username = config.auth.username || '';\n          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n        }\n\n        var fullPath = buildFullPath(config.baseURL, config.url);\n        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n        // Set the request timeout in MS\n        request.timeout = config.timeout;\n\n        // Listen for ready state\n        request.onreadystatechange = function handleLoad() {\n          if (!request || request.readyState !== 4) {\n            return;\n          }\n\n          // The request errored out and we didn't get a response, this will be\n          // handled by onerror instead\n          // With one exception: request that using file: protocol, most browsers\n          // will return status as 0 even though it's a successful request\n          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n            return;\n          }\n\n          // Prepare the response\n          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n          var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n          var response = {\n            data: responseData,\n            status: request.status,\n            statusText: request.statusText,\n            headers: responseHeaders,\n            config: config,\n            request: request\n          };\n\n          settle(resolve, reject, response);\n\n          // Clean up request\n          request = null;\n        };\n\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        request.onabort = function handleAbort() {\n          if (!request) {\n            return;\n          }\n\n          reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n          // Clean up request\n          request = null;\n        };\n\n        // Handle low level network errors\n        request.onerror = function handleError() {\n          // Real errors are hidden from us by the browser\n          // onerror should only fire if it's a network error\n          reject(createError('Network Error', config, null, request));\n\n          // Clean up request\n          request = null;\n        };\n\n        // Handle timeout\n        request.ontimeout = function handleTimeout() {\n          var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n          if (config.timeoutErrorMessage) {\n            timeoutErrorMessage = config.timeoutErrorMessage;\n          }\n          reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n            request));\n\n          // Clean up request\n          request = null;\n        };\n\n        // Add xsrf header\n        // This is only done if running in a standard browser environment.\n        // Specifically not if we're in a web worker, or react-native.\n        if (utils.isStandardBrowserEnv()) {\n          // Add xsrf header\n          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n            cookies.read(config.xsrfCookieName) :\n            undefined;\n\n          if (xsrfValue) {\n            requestHeaders[config.xsrfHeaderName] = xsrfValue;\n          }\n        }\n\n        // Add headers to the request\n        if ('setRequestHeader' in request) {\n          utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n              // Remove Content-Type if data is undefined\n              delete requestHeaders[key];\n            } else {\n              // Otherwise add header to the request\n              request.setRequestHeader(key, val);\n            }\n          });\n        }\n\n        // Add withCredentials to request if needed\n        if (!utils.isUndefined(config.withCredentials)) {\n          request.withCredentials = !!config.withCredentials;\n        }\n\n        // Add responseType to request if needed\n        if (config.responseType) {\n          try {\n            request.responseType = config.responseType;\n          } catch (e) {\n            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n            if (config.responseType !== 'json') {\n              throw e;\n            }\n          }\n        }\n\n        // Handle progress if needed\n        if (typeof config.onDownloadProgress === 'function') {\n          request.addEventListener('progress', config.onDownloadProgress);\n        }\n\n        // Not all browsers support upload events\n        if (typeof config.onUploadProgress === 'function' && request.upload) {\n          request.upload.addEventListener('progress', config.onUploadProgress);\n        }\n\n        if (config.cancelToken) {\n          // Handle cancellation\n          config.cancelToken.promise.then(function onCanceled(cancel) {\n            if (!request) {\n              return;\n            }\n\n            request.abort();\n            reject(cancel);\n            // Clean up request\n            request = null;\n          });\n        }\n\n        if (!requestData) {\n          requestData = null;\n        }\n\n        // Send the request\n        request.send(requestData);\n      });\n    };\n\n    var DEFAULT_CONTENT_TYPE = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n\n    function setContentTypeIfUnset(headers, value) {\n      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n        headers['Content-Type'] = value;\n      }\n    }\n\n    function getDefaultAdapter() {\n      var adapter;\n      if (typeof XMLHttpRequest !== 'undefined') {\n        // For browsers use XHR adapter\n        adapter = xhr;\n      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n        // For node use HTTP adapter\n        adapter = xhr;\n      }\n      return adapter;\n    }\n\n    var defaults = {\n      adapter: getDefaultAdapter(),\n\n      transformRequest: [function transformRequest(data, headers) {\n        normalizeHeaderName(headers, 'Accept');\n        normalizeHeaderName(headers, 'Content-Type');\n        if (utils.isFormData(data) ||\n          utils.isArrayBuffer(data) ||\n          utils.isBuffer(data) ||\n          utils.isStream(data) ||\n          utils.isFile(data) ||\n          utils.isBlob(data)\n        ) {\n          return data;\n        }\n        if (utils.isArrayBufferView(data)) {\n          return data.buffer;\n        }\n        if (utils.isURLSearchParams(data)) {\n          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n          return data.toString();\n        }\n        if (utils.isObject(data)) {\n          setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n          return JSON.stringify(data);\n        }\n        return data;\n      }],\n\n      transformResponse: [function transformResponse(data) {\n        /*eslint no-param-reassign:0*/\n        if (typeof data === 'string') {\n          try {\n            data = JSON.parse(data);\n          } catch (e) { /* Ignore */ }\n        }\n        return data;\n      }],\n\n      /**\n       * A timeout in milliseconds to abort a request. If set to 0 (default) a\n       * timeout is not created.\n       */\n      timeout: 0,\n\n      xsrfCookieName: 'XSRF-TOKEN',\n      xsrfHeaderName: 'X-XSRF-TOKEN',\n\n      maxContentLength: -1,\n      maxBodyLength: -1,\n\n      validateStatus: function validateStatus(status) {\n        return status >= 200 && status < 300;\n      }\n    };\n\n    defaults.headers = {\n      common: {\n        'Accept': 'application/json, text/plain, */*'\n      }\n    };\n\n    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n      defaults.headers[method] = {};\n    });\n\n    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n    });\n\n    var defaults_1 = defaults;\n\n    /**\n     * Throws a `Cancel` if cancellation has been requested.\n     */\n    function throwIfCancellationRequested(config) {\n      if (config.cancelToken) {\n        config.cancelToken.throwIfRequested();\n      }\n    }\n\n    /**\n     * Dispatch a request to the server using the configured adapter.\n     *\n     * @param {object} config The config that is to be used for the request\n     * @returns {Promise} The Promise to be fulfilled\n     */\n    var dispatchRequest = function dispatchRequest(config) {\n      throwIfCancellationRequested(config);\n\n      // Ensure headers exist\n      config.headers = config.headers || {};\n\n      // Transform request data\n      config.data = transformData(\n        config.data,\n        config.headers,\n        config.transformRequest\n      );\n\n      // Flatten headers\n      config.headers = utils.merge(\n        config.headers.common || {},\n        config.headers[config.method] || {},\n        config.headers\n      );\n\n      utils.forEach(\n        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n        function cleanHeaderConfig(method) {\n          delete config.headers[method];\n        }\n      );\n\n      var adapter = config.adapter || defaults_1.adapter;\n\n      return adapter(config).then(function onAdapterResolution(response) {\n        throwIfCancellationRequested(config);\n\n        // Transform response data\n        response.data = transformData(\n          response.data,\n          response.headers,\n          config.transformResponse\n        );\n\n        return response;\n      }, function onAdapterRejection(reason) {\n        if (!isCancel(reason)) {\n          throwIfCancellationRequested(config);\n\n          // Transform response data\n          if (reason && reason.response) {\n            reason.response.data = transformData(\n              reason.response.data,\n              reason.response.headers,\n              config.transformResponse\n            );\n          }\n        }\n\n        return Promise.reject(reason);\n      });\n    };\n\n    /**\n     * Config-specific merge-function which creates a new config-object\n     * by merging two configuration objects together.\n     *\n     * @param {Object} config1\n     * @param {Object} config2\n     * @returns {Object} New object resulting from merging config2 to config1\n     */\n    var mergeConfig = function mergeConfig(config1, config2) {\n      // eslint-disable-next-line no-param-reassign\n      config2 = config2 || {};\n      var config = {};\n\n      var valueFromConfig2Keys = ['url', 'method', 'data'];\n      var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n      var defaultToConfig2Keys = [\n        'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n        'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n        'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n        'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n      ];\n      var directMergeKeys = ['validateStatus'];\n\n      function getMergedValue(target, source) {\n        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n          return utils.merge(target, source);\n        } else if (utils.isPlainObject(source)) {\n          return utils.merge({}, source);\n        } else if (utils.isArray(source)) {\n          return source.slice();\n        }\n        return source;\n      }\n\n      function mergeDeepProperties(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n          config[prop] = getMergedValue(config1[prop], config2[prop]);\n        } else if (!utils.isUndefined(config1[prop])) {\n          config[prop] = getMergedValue(undefined, config1[prop]);\n        }\n      }\n\n      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n          config[prop] = getMergedValue(undefined, config2[prop]);\n        }\n      });\n\n      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n          config[prop] = getMergedValue(undefined, config2[prop]);\n        } else if (!utils.isUndefined(config1[prop])) {\n          config[prop] = getMergedValue(undefined, config1[prop]);\n        }\n      });\n\n      utils.forEach(directMergeKeys, function merge(prop) {\n        if (prop in config2) {\n          config[prop] = getMergedValue(config1[prop], config2[prop]);\n        } else if (prop in config1) {\n          config[prop] = getMergedValue(undefined, config1[prop]);\n        }\n      });\n\n      var axiosKeys = valueFromConfig2Keys\n        .concat(mergeDeepPropertiesKeys)\n        .concat(defaultToConfig2Keys)\n        .concat(directMergeKeys);\n\n      var otherKeys = Object\n        .keys(config1)\n        .concat(Object.keys(config2))\n        .filter(function filterAxiosKeys(key) {\n          return axiosKeys.indexOf(key) === -1;\n        });\n\n      utils.forEach(otherKeys, mergeDeepProperties);\n\n      return config;\n    };\n\n    /**\n     * Create a new instance of Axios\n     *\n     * @param {Object} instanceConfig The default config for the instance\n     */\n    function Axios(instanceConfig) {\n      this.defaults = instanceConfig;\n      this.interceptors = {\n        request: new InterceptorManager_1(),\n        response: new InterceptorManager_1()\n      };\n    }\n\n    /**\n     * Dispatch a request\n     *\n     * @param {Object} config The config specific for this request (merged with this.defaults)\n     */\n    Axios.prototype.request = function request(config) {\n      /*eslint no-param-reassign:0*/\n      // Allow for axios('example/url'[, config]) a la fetch API\n      if (typeof config === 'string') {\n        config = arguments[1] || {};\n        config.url = arguments[0];\n      } else {\n        config = config || {};\n      }\n\n      config = mergeConfig(this.defaults, config);\n\n      // Set config.method\n      if (config.method) {\n        config.method = config.method.toLowerCase();\n      } else if (this.defaults.method) {\n        config.method = this.defaults.method.toLowerCase();\n      } else {\n        config.method = 'get';\n      }\n\n      // Hook up interceptors middleware\n      var chain = [dispatchRequest, undefined];\n      var promise = Promise.resolve(config);\n\n      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n        chain.unshift(interceptor.fulfilled, interceptor.rejected);\n      });\n\n      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n        chain.push(interceptor.fulfilled, interceptor.rejected);\n      });\n\n      while (chain.length) {\n        promise = promise.then(chain.shift(), chain.shift());\n      }\n\n      return promise;\n    };\n\n    Axios.prototype.getUri = function getUri(config) {\n      config = mergeConfig(this.defaults, config);\n      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    };\n\n    // Provide aliases for supported request methods\n    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n      /*eslint func-names:0*/\n      Axios.prototype[method] = function(url, config) {\n        return this.request(mergeConfig(config || {}, {\n          method: method,\n          url: url,\n          data: (config || {}).data\n        }));\n      };\n    });\n\n    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n      /*eslint func-names:0*/\n      Axios.prototype[method] = function(url, data, config) {\n        return this.request(mergeConfig(config || {}, {\n          method: method,\n          url: url,\n          data: data\n        }));\n      };\n    });\n\n    var Axios_1 = Axios;\n\n    /**\n     * A `Cancel` is an object that is thrown when an operation is canceled.\n     *\n     * @class\n     * @param {string=} message The message.\n     */\n    function Cancel(message) {\n      this.message = message;\n    }\n\n    Cancel.prototype.toString = function toString() {\n      return 'Cancel' + (this.message ? ': ' + this.message : '');\n    };\n\n    Cancel.prototype.__CANCEL__ = true;\n\n    var Cancel_1 = Cancel;\n\n    /**\n     * A `CancelToken` is an object that can be used to request cancellation of an operation.\n     *\n     * @class\n     * @param {Function} executor The executor function.\n     */\n    function CancelToken(executor) {\n      if (typeof executor !== 'function') {\n        throw new TypeError('executor must be a function.');\n      }\n\n      var resolvePromise;\n      this.promise = new Promise(function promiseExecutor(resolve) {\n        resolvePromise = resolve;\n      });\n\n      var token = this;\n      executor(function cancel(message) {\n        if (token.reason) {\n          // Cancellation has already been requested\n          return;\n        }\n\n        token.reason = new Cancel_1(message);\n        resolvePromise(token.reason);\n      });\n    }\n\n    /**\n     * Throws a `Cancel` if cancellation has been requested.\n     */\n    CancelToken.prototype.throwIfRequested = function throwIfRequested() {\n      if (this.reason) {\n        throw this.reason;\n      }\n    };\n\n    /**\n     * Returns an object that contains a new `CancelToken` and a function that, when called,\n     * cancels the `CancelToken`.\n     */\n    CancelToken.source = function source() {\n      var cancel;\n      var token = new CancelToken(function executor(c) {\n        cancel = c;\n      });\n      return {\n        token: token,\n        cancel: cancel\n      };\n    };\n\n    var CancelToken_1 = CancelToken;\n\n    /**\n     * Syntactic sugar for invoking a function and expanding an array for arguments.\n     *\n     * Common use case would be to use `Function.prototype.apply`.\n     *\n     *  ```js\n     *  function f(x, y, z) {}\n     *  var args = [1, 2, 3];\n     *  f.apply(null, args);\n     *  ```\n     *\n     * With `spread` this example can be re-written.\n     *\n     *  ```js\n     *  spread(function(x, y, z) {})([1, 2, 3]);\n     *  ```\n     *\n     * @param {Function} callback\n     * @returns {Function}\n     */\n    var spread = function spread(callback) {\n      return function wrap(arr) {\n        return callback.apply(null, arr);\n      };\n    };\n\n    /**\n     * Determines whether the payload is an error thrown by Axios\n     *\n     * @param {*} payload The value to test\n     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n     */\n    var isAxiosError = function isAxiosError(payload) {\n      return (typeof payload === 'object') && (payload.isAxiosError === true);\n    };\n\n    /**\n     * Create an instance of Axios\n     *\n     * @param {Object} defaultConfig The default config for the instance\n     * @return {Axios} A new instance of Axios\n     */\n    function createInstance(defaultConfig) {\n      var context = new Axios_1(defaultConfig);\n      var instance = bind(Axios_1.prototype.request, context);\n\n      // Copy axios.prototype to instance\n      utils.extend(instance, Axios_1.prototype, context);\n\n      // Copy context to instance\n      utils.extend(instance, context);\n\n      return instance;\n    }\n\n    // Create the default instance to be exported\n    var axios = createInstance(defaults_1);\n\n    // Expose Axios class to allow class inheritance\n    axios.Axios = Axios_1;\n\n    // Factory for creating new instances\n    axios.create = function create(instanceConfig) {\n      return createInstance(mergeConfig(axios.defaults, instanceConfig));\n    };\n\n    // Expose Cancel & CancelToken\n    axios.Cancel = Cancel_1;\n    axios.CancelToken = CancelToken_1;\n    axios.isCancel = isCancel;\n\n    // Expose all/spread\n    axios.all = function all(promises) {\n      return Promise.all(promises);\n    };\n    axios.spread = spread;\n\n    // Expose isAxiosError\n    axios.isAxiosError = isAxiosError;\n\n    var axios_1 = axios;\n\n    // Allow use of default import syntax in TypeScript\n    var _default = axios;\n    axios_1.default = _default;\n\n    var axios$1 = axios_1;\n\n    var AlpineFetchMagicMethod = {\n      start: function start() {\n        checkForAlpine();\n        Alpine.addMagicProperty('fetch', function () {\n          return function () {\n            for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n              parameters[_key] = arguments[_key];\n            }\n\n            if (typeof parameters[0] === 'string' && parameters[0].length) {\n              return axios$1.get(parameters[0]).then(function (response) {\n                return Object.prototype.hasOwnProperty.call(response, 'data') ? response.data : response;\n              });\n            }\n\n            if (typeof parameters[0] === 'object') {\n              return axios$1(parameters[0]);\n            }\n\n            return parameters[0];\n          };\n        });\n      }\n    };\n\n    var alpine$1 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineFetchMagicMethod.start();\n      alpine$1(callback);\n    };\n\n    var AlpineIntervalMagicMethod = {\n      start: function start() {\n        checkForAlpine();\n        Alpine.addMagicProperty('interval', function () {\n          return function () {\n            var _this = this;\n\n            for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n              parameters[_key] = arguments[_key];\n            }\n\n            if (typeof parameters[0] !== 'function') return parameters[0];\n            var timer = parameters[1];\n            var delay = 0;\n            var forceInterval = false; // Users can pass in an object as a second parameter instead\n\n            if (typeof parameters[1] === 'object') {\n              if (Object.prototype.hasOwnProperty.call(parameters[1], 'timer')) {\n                timer = parameters[1].timer;\n              }\n\n              if (Object.prototype.hasOwnProperty.call(parameters[1], 'delay')) {\n                delay = parameters[1].delay;\n              }\n\n              if (Object.prototype.hasOwnProperty.call(parameters[1], 'forceInterval')) {\n                forceInterval = parameters[1].forceInterval;\n              }\n            }\n\n            var loop = function loop() {\n              var test = Object.prototype.hasOwnProperty.call(_this, 'autoIntervalTest') ? _this.autoIntervalTest : true;\n              setTimeout(function () {\n                if (!_this.autoIntervalLoop) return;\n                test && parameters[0].call(_this);\n                forceInterval ? _this.autoIntervalLoop() : requestAnimationFrame(_this.autoIntervalLoop);\n              }, timer);\n            };\n\n            this.autoIntervalLoop = loop;\n            setTimeout(function () {\n              if (!_this.autoIntervalLoop) return;\n              forceInterval ? _this.autoIntervalLoop() : requestAnimationFrame(_this.autoIntervalLoop);\n            }, delay);\n            this.$watch('autoIntervalTest', function (test) {\n              if (test) {\n                _this.autoIntervalLoop = loop;\n                forceInterval ? _this.autoIntervalLoop() : requestAnimationFrame(_this.autoIntervalLoop);\n              } else {\n                clearTimeout(_this.autoIntervalLoop);\n                _this.autoIntervalLoop = null;\n              }\n            });\n          };\n        });\n      }\n    };\n\n    var alpine$2 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineIntervalMagicMethod.start();\n      alpine$2(callback);\n    };\n\n    var AlpineRangeMagicMethod = {\n      start: function start() {\n        checkForAlpine();\n        Alpine.addMagicProperty('range', function () {\n          return function (start, stop, step) {\n            if (step === void 0) {\n              step = 1;\n            }\n\n            // Accept $range(10) and expect 1...10\n            if (typeof stop === 'undefined') {\n              stop = start;\n              start = start ? 1 : 0;\n            } // Accept $range(20, 10) and expect 20...10\n\n\n            var reverse = start > stop;\n\n            if (reverse) {\n              var _ref = [stop, start];\n              start = _ref[0];\n              stop = _ref[1];\n            } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Sequence_generator_range\n\n\n            var range = Array.from({\n              length: (stop - start) / step + 1\n            }, function (_, i) {\n              return start + i * step;\n            });\n            return reverse ? range.reverse() : range;\n          };\n        });\n      }\n    };\n\n    var alpine$3 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineRangeMagicMethod.start();\n      alpine$3(callback);\n    };\n\n    var AlpineRefreshMagicMethod = {\n      start: function start() {\n        checkForAlpine();\n        Alpine.addMagicProperty('refresh', function ($el) {\n          if (!$el.__x) {\n            return function () {};\n          }\n\n          return function (component) {\n            if (component === void 0) {\n              component = $el;\n            }\n\n            return component.__x.updateElements(component);\n          };\n        });\n      }\n    };\n\n    var alpine$4 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineRefreshMagicMethod.start();\n      alpine$4(callback);\n    };\n\n    var Config = /*#__PURE__*/function () {\n      function Config() {\n        var _this = this;\n\n        this.values = {\n          breakpoints: {\n            xs: 0,\n            sm: 640,\n            md: 768,\n            lg: 1024,\n            xl: 1280,\n            '2xl': 1536\n          }\n        }; // After all assets are loaded but before the page is actually ready when ALpine will kick in\n\n        document.addEventListener('readystatechange', function () {\n          if (document.readyState === 'interactive' && window.AlpineMagicHelpersConfig) {\n            for (var index in window.AlpineMagicHelpersConfig) {\n              _this.values[index] = window.AlpineMagicHelpersConfig[index];\n            }\n          }\n        });\n      }\n\n      var _proto = Config.prototype;\n\n      _proto.get = function get(property) {\n        return this.values[property] ? this.values[property] : null;\n      };\n\n      return Config;\n    }();\n\n    var config = new Config();\n\n    var screenComponents = []; // Debounce `updateElements` method to prevent memory leak\n\n    var debouncedScreensUpdate = function debouncedScreensUpdate() {\n      var update; // Update component if $el is in `screenComponents`\n\n      var updateScreens = function updateScreens() {\n        clearTimeout(update);\n        update = setTimeout(function () {\n          screenComponents.forEach(function ($el) {\n            return $el && $el.__x && $el.__x.updateElements($el);\n          });\n        }, 150);\n      };\n\n      return updateScreens;\n    };\n\n    var AlpineScreenMagicMethod = {\n      start: function start() {\n        // Bind `debouncedScreensUpdate` to resize event on window\n        // Note that `resize` event will be triggered on `orientationchange` event as well\n        window.addEventListener('resize', debouncedScreensUpdate());\n        Alpine.addMagicProperty('screen', function ($el) {\n          // Push $el if it's not in the `screenComponents`\n          if (!screenComponents.includes($el)) {\n            screenComponents.push($el);\n          }\n\n          return function (breakpoint) {\n            // Get current window width\n            var width = window.innerWidth; // Early return if breakpoint is provided as number\n\n            if (Number.isInteger(breakpoint)) return breakpoint <= width; // Get breakpoints from Config\n\n            var configBreakpoints = config.get('breakpoints'); // Check if breakpoint exists\n\n            if (configBreakpoints[breakpoint] === undefined) {\n              throw Error('Undefined $screen property: ' + breakpoint);\n            } // Finally compare breakpoint with window width and return as boolean\n\n\n            return configBreakpoints[breakpoint] <= width;\n          };\n        });\n      }\n    };\n\n    var alpine$5 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineScreenMagicMethod.start();\n      alpine$5(callback);\n    };\n\n    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n    function createCommonjsModule(fn) {\n      var module = { exports: {} };\n    \treturn fn(module, module.exports), module.exports;\n    }\n\n    /* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */\n\n    var smoothscroll = createCommonjsModule(function (module, exports) {\n    (function () {\n\n      // polyfill\n      function polyfill() {\n        // aliases\n        var w = window;\n        var d = document;\n\n        // return if scroll behavior is supported and polyfill is not forced\n        if (\n          'scrollBehavior' in d.documentElement.style &&\n          w.__forceSmoothScrollPolyfill__ !== true\n        ) {\n          return;\n        }\n\n        // globals\n        var Element = w.HTMLElement || w.Element;\n        var SCROLL_TIME = 468;\n\n        // object gathering original scroll methods\n        var original = {\n          scroll: w.scroll || w.scrollTo,\n          scrollBy: w.scrollBy,\n          elementScroll: Element.prototype.scroll || scrollElement,\n          scrollIntoView: Element.prototype.scrollIntoView\n        };\n\n        // define timing method\n        var now =\n          w.performance && w.performance.now\n            ? w.performance.now.bind(w.performance)\n            : Date.now;\n\n        /**\n         * indicates if a the current browser is made by Microsoft\n         * @method isMicrosoftBrowser\n         * @param {String} userAgent\n         * @returns {Boolean}\n         */\n        function isMicrosoftBrowser(userAgent) {\n          var userAgentPatterns = ['MSIE ', 'Trident/', 'Edge/'];\n\n          return new RegExp(userAgentPatterns.join('|')).test(userAgent);\n        }\n\n        /*\n         * IE has rounding bug rounding down clientHeight and clientWidth and\n         * rounding up scrollHeight and scrollWidth causing false positives\n         * on hasScrollableSpace\n         */\n        var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;\n\n        /**\n         * changes scroll position inside an element\n         * @method scrollElement\n         * @param {Number} x\n         * @param {Number} y\n         * @returns {undefined}\n         */\n        function scrollElement(x, y) {\n          this.scrollLeft = x;\n          this.scrollTop = y;\n        }\n\n        /**\n         * returns result of applying ease math function to a number\n         * @method ease\n         * @param {Number} k\n         * @returns {Number}\n         */\n        function ease(k) {\n          return 0.5 * (1 - Math.cos(Math.PI * k));\n        }\n\n        /**\n         * indicates if a smooth behavior should be applied\n         * @method shouldBailOut\n         * @param {Number|Object} firstArg\n         * @returns {Boolean}\n         */\n        function shouldBailOut(firstArg) {\n          if (\n            firstArg === null ||\n            typeof firstArg !== 'object' ||\n            firstArg.behavior === undefined ||\n            firstArg.behavior === 'auto' ||\n            firstArg.behavior === 'instant'\n          ) {\n            // first argument is not an object/null\n            // or behavior is auto, instant or undefined\n            return true;\n          }\n\n          if (typeof firstArg === 'object' && firstArg.behavior === 'smooth') {\n            // first argument is an object and behavior is smooth\n            return false;\n          }\n\n          // throw error when behavior is not supported\n          throw new TypeError(\n            'behavior member of ScrollOptions ' +\n              firstArg.behavior +\n              ' is not a valid value for enumeration ScrollBehavior.'\n          );\n        }\n\n        /**\n         * indicates if an element has scrollable space in the provided axis\n         * @method hasScrollableSpace\n         * @param {Node} el\n         * @param {String} axis\n         * @returns {Boolean}\n         */\n        function hasScrollableSpace(el, axis) {\n          if (axis === 'Y') {\n            return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;\n          }\n\n          if (axis === 'X') {\n            return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;\n          }\n        }\n\n        /**\n         * indicates if an element has a scrollable overflow property in the axis\n         * @method canOverflow\n         * @param {Node} el\n         * @param {String} axis\n         * @returns {Boolean}\n         */\n        function canOverflow(el, axis) {\n          var overflowValue = w.getComputedStyle(el, null)['overflow' + axis];\n\n          return overflowValue === 'auto' || overflowValue === 'scroll';\n        }\n\n        /**\n         * indicates if an element can be scrolled in either axis\n         * @method isScrollable\n         * @param {Node} el\n         * @param {String} axis\n         * @returns {Boolean}\n         */\n        function isScrollable(el) {\n          var isScrollableY = hasScrollableSpace(el, 'Y') && canOverflow(el, 'Y');\n          var isScrollableX = hasScrollableSpace(el, 'X') && canOverflow(el, 'X');\n\n          return isScrollableY || isScrollableX;\n        }\n\n        /**\n         * finds scrollable parent of an element\n         * @method findScrollableParent\n         * @param {Node} el\n         * @returns {Node} el\n         */\n        function findScrollableParent(el) {\n          while (el !== d.body && isScrollable(el) === false) {\n            el = el.parentNode || el.host;\n          }\n\n          return el;\n        }\n\n        /**\n         * self invoked function that, given a context, steps through scrolling\n         * @method step\n         * @param {Object} context\n         * @returns {undefined}\n         */\n        function step(context) {\n          var time = now();\n          var value;\n          var currentX;\n          var currentY;\n          var elapsed = (time - context.startTime) / SCROLL_TIME;\n\n          // avoid elapsed times higher than one\n          elapsed = elapsed > 1 ? 1 : elapsed;\n\n          // apply easing to elapsed time\n          value = ease(elapsed);\n\n          currentX = context.startX + (context.x - context.startX) * value;\n          currentY = context.startY + (context.y - context.startY) * value;\n\n          context.method.call(context.scrollable, currentX, currentY);\n\n          // scroll more if we have not reached our destination\n          if (currentX !== context.x || currentY !== context.y) {\n            w.requestAnimationFrame(step.bind(w, context));\n          }\n        }\n\n        /**\n         * scrolls window or element with a smooth behavior\n         * @method smoothScroll\n         * @param {Object|Node} el\n         * @param {Number} x\n         * @param {Number} y\n         * @returns {undefined}\n         */\n        function smoothScroll(el, x, y) {\n          var scrollable;\n          var startX;\n          var startY;\n          var method;\n          var startTime = now();\n\n          // define scroll context\n          if (el === d.body) {\n            scrollable = w;\n            startX = w.scrollX || w.pageXOffset;\n            startY = w.scrollY || w.pageYOffset;\n            method = original.scroll;\n          } else {\n            scrollable = el;\n            startX = el.scrollLeft;\n            startY = el.scrollTop;\n            method = scrollElement;\n          }\n\n          // scroll looping over a frame\n          step({\n            scrollable: scrollable,\n            method: method,\n            startTime: startTime,\n            startX: startX,\n            startY: startY,\n            x: x,\n            y: y\n          });\n        }\n\n        // ORIGINAL METHODS OVERRIDES\n        // w.scroll and w.scrollTo\n        w.scroll = w.scrollTo = function() {\n          // avoid action when no arguments are passed\n          if (arguments[0] === undefined) {\n            return;\n          }\n\n          // avoid smooth behavior if not required\n          if (shouldBailOut(arguments[0]) === true) {\n            original.scroll.call(\n              w,\n              arguments[0].left !== undefined\n                ? arguments[0].left\n                : typeof arguments[0] !== 'object'\n                  ? arguments[0]\n                  : w.scrollX || w.pageXOffset,\n              // use top prop, second argument if present or fallback to scrollY\n              arguments[0].top !== undefined\n                ? arguments[0].top\n                : arguments[1] !== undefined\n                  ? arguments[1]\n                  : w.scrollY || w.pageYOffset\n            );\n\n            return;\n          }\n\n          // LET THE SMOOTHNESS BEGIN!\n          smoothScroll.call(\n            w,\n            d.body,\n            arguments[0].left !== undefined\n              ? ~~arguments[0].left\n              : w.scrollX || w.pageXOffset,\n            arguments[0].top !== undefined\n              ? ~~arguments[0].top\n              : w.scrollY || w.pageYOffset\n          );\n        };\n\n        // w.scrollBy\n        w.scrollBy = function() {\n          // avoid action when no arguments are passed\n          if (arguments[0] === undefined) {\n            return;\n          }\n\n          // avoid smooth behavior if not required\n          if (shouldBailOut(arguments[0])) {\n            original.scrollBy.call(\n              w,\n              arguments[0].left !== undefined\n                ? arguments[0].left\n                : typeof arguments[0] !== 'object' ? arguments[0] : 0,\n              arguments[0].top !== undefined\n                ? arguments[0].top\n                : arguments[1] !== undefined ? arguments[1] : 0\n            );\n\n            return;\n          }\n\n          // LET THE SMOOTHNESS BEGIN!\n          smoothScroll.call(\n            w,\n            d.body,\n            ~~arguments[0].left + (w.scrollX || w.pageXOffset),\n            ~~arguments[0].top + (w.scrollY || w.pageYOffset)\n          );\n        };\n\n        // Element.prototype.scroll and Element.prototype.scrollTo\n        Element.prototype.scroll = Element.prototype.scrollTo = function() {\n          // avoid action when no arguments are passed\n          if (arguments[0] === undefined) {\n            return;\n          }\n\n          // avoid smooth behavior if not required\n          if (shouldBailOut(arguments[0]) === true) {\n            // if one number is passed, throw error to match Firefox implementation\n            if (typeof arguments[0] === 'number' && arguments[1] === undefined) {\n              throw new SyntaxError('Value could not be converted');\n            }\n\n            original.elementScroll.call(\n              this,\n              // use left prop, first number argument or fallback to scrollLeft\n              arguments[0].left !== undefined\n                ? ~~arguments[0].left\n                : typeof arguments[0] !== 'object' ? ~~arguments[0] : this.scrollLeft,\n              // use top prop, second argument or fallback to scrollTop\n              arguments[0].top !== undefined\n                ? ~~arguments[0].top\n                : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop\n            );\n\n            return;\n          }\n\n          var left = arguments[0].left;\n          var top = arguments[0].top;\n\n          // LET THE SMOOTHNESS BEGIN!\n          smoothScroll.call(\n            this,\n            this,\n            typeof left === 'undefined' ? this.scrollLeft : ~~left,\n            typeof top === 'undefined' ? this.scrollTop : ~~top\n          );\n        };\n\n        // Element.prototype.scrollBy\n        Element.prototype.scrollBy = function() {\n          // avoid action when no arguments are passed\n          if (arguments[0] === undefined) {\n            return;\n          }\n\n          // avoid smooth behavior if not required\n          if (shouldBailOut(arguments[0]) === true) {\n            original.elementScroll.call(\n              this,\n              arguments[0].left !== undefined\n                ? ~~arguments[0].left + this.scrollLeft\n                : ~~arguments[0] + this.scrollLeft,\n              arguments[0].top !== undefined\n                ? ~~arguments[0].top + this.scrollTop\n                : ~~arguments[1] + this.scrollTop\n            );\n\n            return;\n          }\n\n          this.scroll({\n            left: ~~arguments[0].left + this.scrollLeft,\n            top: ~~arguments[0].top + this.scrollTop,\n            behavior: arguments[0].behavior\n          });\n        };\n\n        // Element.prototype.scrollIntoView\n        Element.prototype.scrollIntoView = function() {\n          // avoid smooth behavior if not required\n          if (shouldBailOut(arguments[0]) === true) {\n            original.scrollIntoView.call(\n              this,\n              arguments[0] === undefined ? true : arguments[0]\n            );\n\n            return;\n          }\n\n          // LET THE SMOOTHNESS BEGIN!\n          var scrollableParent = findScrollableParent(this);\n          var parentRects = scrollableParent.getBoundingClientRect();\n          var clientRects = this.getBoundingClientRect();\n\n          if (scrollableParent !== d.body) {\n            // reveal element inside parent\n            smoothScroll.call(\n              this,\n              scrollableParent,\n              scrollableParent.scrollLeft + clientRects.left - parentRects.left,\n              scrollableParent.scrollTop + clientRects.top - parentRects.top\n            );\n\n            // reveal parent in viewport unless is fixed\n            if (w.getComputedStyle(scrollableParent).position !== 'fixed') {\n              w.scrollBy({\n                left: parentRects.left,\n                top: parentRects.top,\n                behavior: 'smooth'\n              });\n            }\n          } else {\n            // reveal element in viewport\n            w.scrollBy({\n              left: clientRects.left,\n              top: clientRects.top,\n              behavior: 'smooth'\n            });\n          }\n        };\n      }\n\n      {\n        // commonjs\n        module.exports = { polyfill: polyfill };\n      }\n\n    }());\n    });\n\n    smoothscroll.polyfill();\n    var AlpineScrollMagicMethod = {\n      start: function start() {\n        Alpine.addMagicProperty('scroll', function () {\n          return function (target, options) {\n            if (options === void 0) {\n              options = {};\n            }\n\n            var originalTarget = target; // Check if we specified an offset\n\n            var offset = options.offset ? parseInt(options.offset, 10) : 0;\n            delete options.offset; // Support integers specified as strings\n            // We do a strict check first because we don't whant to support things like \"100foo\"\n\n            if (typeof target === 'string' && /^[0-9]+?/g.test(target)) {\n              target = parseInt(target, 10);\n            } // Support for CSS query selector\n\n\n            if (typeof target === 'string') {\n              target = document.querySelector(target);\n            } // If we got an element, get the y coordinate relative to the document\n            // This could happens if we trasform a selector or if we pass an Element in,\n            // for example using $ref['something']\n\n\n            if (target instanceof Element) {\n              target = Math.floor(target.getBoundingClientRect().top + window.pageYOffset);\n            } // If target has been converted to the y coordinate or was an object to begin with\n            // we transform it to a ScrollToOptions dictionary\n\n\n            if (Number.isInteger(target)) {\n              target = {\n                top: target - offset,\n                behavior: 'smooth' // default to smooth\n\n              };\n            } // At this point target should be either be converted to a ScrollToOptions dictionary\n            // or should have been an object to begin with. If it isn't, it's time to give up.\n\n\n            if (typeof target !== 'object') {\n              throw Error('Unsupported $scroll target: ', originalTarget);\n            } // Override the dictionary with the options passed as second params\n\n\n            Object.assign(target, options); // Let's scroll eventually\n\n            window.scroll(target);\n          };\n        });\n      }\n    };\n\n    var alpine$6 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineScrollMagicMethod.start();\n      alpine$6(callback);\n    };\n\n    var AlpineTruncateMagicMethod = {\n      start: function start() {\n        var _this = this;\n\n        checkForAlpine();\n        Alpine.addMagicProperty('truncate', function () {\n          return function () {\n            for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {\n              parameters[_key] = arguments[_key];\n            }\n\n            if (typeof parameters[0] !== 'string') return parameters[0]; // If the second parameter isn't truthy, return the full string\n\n            if (!parameters[1]) return parameters[0]; // if only a number or string is passed in, keep it simple\n\n            if (typeof parameters[1] !== 'object') {\n              return _this.appendEllipsis(parameters[0].slice(0, parameters[1]), parameters);\n            } // If words or characters is set, also check that they are truthy. Setting to 0, for example, shoudld show all\n\n\n            if (Object.prototype.hasOwnProperty.call(parameters[1], 'words') && parameters[1].words) {\n              return _this.appendEllipsis(parameters[0].split(' ').splice(0, parameters[1].words).join(' '), parameters);\n            }\n\n            if (Object.prototype.hasOwnProperty.call(parameters[1], 'characters') && parameters[1].characters) {\n              return _this.appendEllipsis(parameters[0].slice(0, parameters[1].characters), parameters);\n            }\n\n            return parameters[0];\n          };\n        });\n      },\n      appendEllipsis: function appendEllipsis(string, parameters) {\n        if (parameters[0].length <= string.length) return string;\n        var ellipsis = '…'; // 3rd parameter is an optional '…' override (soon to be deprecated)\n\n        if (typeof parameters[2] !== 'undefined') {\n          ellipsis = parameters[2];\n        } // If the second parameter is an object\n\n\n        if (Object.prototype.hasOwnProperty.call(parameters[1], 'ellipsis')) {\n          ellipsis = parameters[1].ellipsis;\n        }\n\n        return string + ellipsis;\n      }\n    };\n\n    var alpine$7 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineTruncateMagicMethod.start();\n      alpine$7(callback);\n    };\n\n    var deepDiff = createCommonjsModule(function (module, exports) {\n    (function(root, factory) { // eslint-disable-line no-extra-semi\n      var deepDiff = factory(root);\n      // eslint-disable-next-line no-undef\n      {\n          // Node.js or ReactNative\n          module.exports = deepDiff;\n      }\n    }(commonjsGlobal, function(root) {\n      var validKinds = ['N', 'E', 'A', 'D'];\n\n      // nodejs compatible on server side and in the browser.\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        ctor.prototype = Object.create(superCtor.prototype, {\n          constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n      }\n\n      function Diff(kind, path) {\n        Object.defineProperty(this, 'kind', {\n          value: kind,\n          enumerable: true\n        });\n        if (path && path.length) {\n          Object.defineProperty(this, 'path', {\n            value: path,\n            enumerable: true\n          });\n        }\n      }\n\n      function DiffEdit(path, origin, value) {\n        DiffEdit.super_.call(this, 'E', path);\n        Object.defineProperty(this, 'lhs', {\n          value: origin,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'rhs', {\n          value: value,\n          enumerable: true\n        });\n      }\n      inherits(DiffEdit, Diff);\n\n      function DiffNew(path, value) {\n        DiffNew.super_.call(this, 'N', path);\n        Object.defineProperty(this, 'rhs', {\n          value: value,\n          enumerable: true\n        });\n      }\n      inherits(DiffNew, Diff);\n\n      function DiffDeleted(path, value) {\n        DiffDeleted.super_.call(this, 'D', path);\n        Object.defineProperty(this, 'lhs', {\n          value: value,\n          enumerable: true\n        });\n      }\n      inherits(DiffDeleted, Diff);\n\n      function DiffArray(path, index, item) {\n        DiffArray.super_.call(this, 'A', path);\n        Object.defineProperty(this, 'index', {\n          value: index,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'item', {\n          value: item,\n          enumerable: true\n        });\n      }\n      inherits(DiffArray, Diff);\n\n      function arrayRemove(arr, from, to) {\n        var rest = arr.slice((to || from) + 1 || arr.length);\n        arr.length = from < 0 ? arr.length + from : from;\n        arr.push.apply(arr, rest);\n        return arr;\n      }\n\n      function realTypeOf(subject) {\n        var type = typeof subject;\n        if (type !== 'object') {\n          return type;\n        }\n\n        if (subject === Math) {\n          return 'math';\n        } else if (subject === null) {\n          return 'null';\n        } else if (Array.isArray(subject)) {\n          return 'array';\n        } else if (Object.prototype.toString.call(subject) === '[object Date]') {\n          return 'date';\n        } else if (typeof subject.toString === 'function' && /^\\/.*\\//.test(subject.toString())) {\n          return 'regexp';\n        }\n        return 'object';\n      }\n\n      // http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n      function hashThisString(string) {\n        var hash = 0;\n        if (string.length === 0) { return hash; }\n        for (var i = 0; i < string.length; i++) {\n          var char = string.charCodeAt(i);\n          hash = ((hash << 5) - hash) + char;\n          hash = hash & hash; // Convert to 32bit integer\n        }\n        return hash;\n      }\n\n      // Gets a hash of the given object in an array order-independent fashion\n      // also object key order independent (easier since they can be alphabetized)\n      function getOrderIndependentHash(object) {\n        var accum = 0;\n        var type = realTypeOf(object);\n\n        if (type === 'array') {\n          object.forEach(function (item) {\n            // Addition is commutative so this is order indep\n            accum += getOrderIndependentHash(item);\n          });\n\n          var arrayString = '[type: array, hash: ' + accum + ']';\n          return accum + hashThisString(arrayString);\n        }\n\n        if (type === 'object') {\n          for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n              var keyValueString = '[ type: object, key: ' + key + ', value hash: ' + getOrderIndependentHash(object[key]) + ']';\n              accum += hashThisString(keyValueString);\n            }\n          }\n\n          return accum;\n        }\n\n        // Non object, non array...should be good?\n        var stringToHash = '[ type: ' + type + ' ; value: ' + object + ']';\n        return accum + hashThisString(stringToHash);\n      }\n\n      function deepDiff(lhs, rhs, changes, prefilter, path, key, stack, orderIndependent) {\n        changes = changes || [];\n        path = path || [];\n        stack = stack || [];\n        var currentPath = path.slice(0);\n        if (typeof key !== 'undefined' && key !== null) {\n          if (prefilter) {\n            if (typeof (prefilter) === 'function' && prefilter(currentPath, key)) {\n              return;\n            } else if (typeof (prefilter) === 'object') {\n              if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {\n                return;\n              }\n              if (prefilter.normalize) {\n                var alt = prefilter.normalize(currentPath, key, lhs, rhs);\n                if (alt) {\n                  lhs = alt[0];\n                  rhs = alt[1];\n                }\n              }\n            }\n          }\n          currentPath.push(key);\n        }\n\n        // Use string comparison for regexes\n        if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {\n          lhs = lhs.toString();\n          rhs = rhs.toString();\n        }\n\n        var ltype = typeof lhs;\n        var rtype = typeof rhs;\n        var i, j, k, other;\n\n        var ldefined = ltype !== 'undefined' ||\n          (stack && (stack.length > 0) && stack[stack.length - 1].lhs &&\n            Object.getOwnPropertyDescriptor(stack[stack.length - 1].lhs, key));\n        var rdefined = rtype !== 'undefined' ||\n          (stack && (stack.length > 0) && stack[stack.length - 1].rhs &&\n            Object.getOwnPropertyDescriptor(stack[stack.length - 1].rhs, key));\n\n        if (!ldefined && rdefined) {\n          changes.push(new DiffNew(currentPath, rhs));\n        } else if (!rdefined && ldefined) {\n          changes.push(new DiffDeleted(currentPath, lhs));\n        } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {\n          changes.push(new DiffEdit(currentPath, lhs, rhs));\n        } else if (realTypeOf(lhs) === 'date' && (lhs - rhs) !== 0) {\n          changes.push(new DiffEdit(currentPath, lhs, rhs));\n        } else if (ltype === 'object' && lhs !== null && rhs !== null) {\n          for (i = stack.length - 1; i > -1; --i) {\n            if (stack[i].lhs === lhs) {\n              other = true;\n              break;\n            }\n          }\n          if (!other) {\n            stack.push({ lhs: lhs, rhs: rhs });\n            if (Array.isArray(lhs)) {\n              // If order doesn't matter, we need to sort our arrays\n              if (orderIndependent) {\n                lhs.sort(function (a, b) {\n                  return getOrderIndependentHash(a) - getOrderIndependentHash(b);\n                });\n\n                rhs.sort(function (a, b) {\n                  return getOrderIndependentHash(a) - getOrderIndependentHash(b);\n                });\n              }\n              i = rhs.length - 1;\n              j = lhs.length - 1;\n              while (i > j) {\n                changes.push(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i--])));\n              }\n              while (j > i) {\n                changes.push(new DiffArray(currentPath, j, new DiffDeleted(undefined, lhs[j--])));\n              }\n              for (; i >= 0; --i) {\n                deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack, orderIndependent);\n              }\n            } else {\n              var akeys = Object.keys(lhs);\n              var pkeys = Object.keys(rhs);\n              for (i = 0; i < akeys.length; ++i) {\n                k = akeys[i];\n                other = pkeys.indexOf(k);\n                if (other >= 0) {\n                  deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n                  pkeys[other] = null;\n                } else {\n                  deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack, orderIndependent);\n                }\n              }\n              for (i = 0; i < pkeys.length; ++i) {\n                k = pkeys[i];\n                if (k) {\n                  deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack, orderIndependent);\n                }\n              }\n            }\n            stack.length = stack.length - 1;\n          } else if (lhs !== rhs) {\n            // lhs is contains a cycle at this element and it differs from rhs\n            changes.push(new DiffEdit(currentPath, lhs, rhs));\n          }\n        } else if (lhs !== rhs) {\n          if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {\n            changes.push(new DiffEdit(currentPath, lhs, rhs));\n          }\n        }\n      }\n\n      function observableDiff(lhs, rhs, observer, prefilter, orderIndependent) {\n        var changes = [];\n        deepDiff(lhs, rhs, changes, prefilter, null, null, null, orderIndependent);\n        if (observer) {\n          for (var i = 0; i < changes.length; ++i) {\n            observer(changes[i]);\n          }\n        }\n        return changes;\n      }\n\n      function orderIndependentDeepDiff(lhs, rhs, changes, prefilter, path, key, stack) {\n        return deepDiff(lhs, rhs, changes, prefilter, path, key, stack, true);\n      }\n\n      function accumulateDiff(lhs, rhs, prefilter, accum) {\n        var observer = (accum) ?\n          function (difference) {\n            if (difference) {\n              accum.push(difference);\n            }\n          } : undefined;\n        var changes = observableDiff(lhs, rhs, observer, prefilter);\n        return (accum) ? accum : (changes.length) ? changes : undefined;\n      }\n\n      function accumulateOrderIndependentDiff(lhs, rhs, prefilter, accum) {\n        var observer = (accum) ?\n          function (difference) {\n            if (difference) {\n              accum.push(difference);\n            }\n          } : undefined;\n        var changes = observableDiff(lhs, rhs, observer, prefilter, true);\n        return (accum) ? accum : (changes.length) ? changes : undefined;\n      }\n\n      function applyArrayChange(arr, index, change) {\n        if (change.path && change.path.length) {\n          var it = arr[index],\n            i, u = change.path.length - 1;\n          for (i = 0; i < u; i++) {\n            it = it[change.path[i]];\n          }\n          switch (change.kind) {\n            case 'A':\n              applyArrayChange(it[change.path[i]], change.index, change.item);\n              break;\n            case 'D':\n              delete it[change.path[i]];\n              break;\n            case 'E':\n            case 'N':\n              it[change.path[i]] = change.rhs;\n              break;\n          }\n        } else {\n          switch (change.kind) {\n            case 'A':\n              applyArrayChange(arr[index], change.index, change.item);\n              break;\n            case 'D':\n              arr = arrayRemove(arr, index);\n              break;\n            case 'E':\n            case 'N':\n              arr[index] = change.rhs;\n              break;\n          }\n        }\n        return arr;\n      }\n\n      function applyChange(target, source, change) {\n        if (typeof change === 'undefined' && source && ~validKinds.indexOf(source.kind)) {\n          change = source;\n        }\n        if (target && change && change.kind) {\n          var it = target,\n            i = -1,\n            last = change.path ? change.path.length - 1 : 0;\n          while (++i < last) {\n            if (typeof it[change.path[i]] === 'undefined') {\n              it[change.path[i]] = (typeof change.path[i + 1] !== 'undefined' && typeof change.path[i + 1] === 'number') ? [] : {};\n            }\n            it = it[change.path[i]];\n          }\n          switch (change.kind) {\n            case 'A':\n              if (change.path && typeof it[change.path[i]] === 'undefined') {\n                it[change.path[i]] = [];\n              }\n              applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);\n              break;\n            case 'D':\n              delete it[change.path[i]];\n              break;\n            case 'E':\n            case 'N':\n              it[change.path[i]] = change.rhs;\n              break;\n          }\n        }\n      }\n\n      function revertArrayChange(arr, index, change) {\n        if (change.path && change.path.length) {\n          // the structure of the object at the index has changed...\n          var it = arr[index],\n            i, u = change.path.length - 1;\n          for (i = 0; i < u; i++) {\n            it = it[change.path[i]];\n          }\n          switch (change.kind) {\n            case 'A':\n              revertArrayChange(it[change.path[i]], change.index, change.item);\n              break;\n            case 'D':\n              it[change.path[i]] = change.lhs;\n              break;\n            case 'E':\n              it[change.path[i]] = change.lhs;\n              break;\n            case 'N':\n              delete it[change.path[i]];\n              break;\n          }\n        } else {\n          // the array item is different...\n          switch (change.kind) {\n            case 'A':\n              revertArrayChange(arr[index], change.index, change.item);\n              break;\n            case 'D':\n              arr[index] = change.lhs;\n              break;\n            case 'E':\n              arr[index] = change.lhs;\n              break;\n            case 'N':\n              arr = arrayRemove(arr, index);\n              break;\n          }\n        }\n        return arr;\n      }\n\n      function revertChange(target, source, change) {\n        if (target && source && change && change.kind) {\n          var it = target,\n            i, u;\n          u = change.path.length - 1;\n          for (i = 0; i < u; i++) {\n            if (typeof it[change.path[i]] === 'undefined') {\n              it[change.path[i]] = {};\n            }\n            it = it[change.path[i]];\n          }\n          switch (change.kind) {\n            case 'A':\n              // Array was modified...\n              // it will be an array...\n              revertArrayChange(it[change.path[i]], change.index, change.item);\n              break;\n            case 'D':\n              // Item was deleted...\n              it[change.path[i]] = change.lhs;\n              break;\n            case 'E':\n              // Item was edited...\n              it[change.path[i]] = change.lhs;\n              break;\n            case 'N':\n              // Item is new...\n              delete it[change.path[i]];\n              break;\n          }\n        }\n      }\n\n      function applyDiff(target, source, filter) {\n        if (target && source) {\n          var onChange = function (change) {\n            if (!filter || filter(target, source, change)) {\n              applyChange(target, source, change);\n            }\n          };\n          observableDiff(target, source, onChange);\n        }\n      }\n\n      Object.defineProperties(accumulateDiff, {\n\n        diff: {\n          value: accumulateDiff,\n          enumerable: true\n        },\n        orderIndependentDiff: {\n          value: accumulateOrderIndependentDiff,\n          enumerable: true\n        },\n        observableDiff: {\n          value: observableDiff,\n          enumerable: true\n        },\n        orderIndependentObservableDiff: {\n          value: orderIndependentDeepDiff,\n          enumerable: true\n        },\n        orderIndepHash: {\n          value: getOrderIndependentHash,\n          enumerable: true\n        },\n        applyDiff: {\n          value: applyDiff,\n          enumerable: true\n        },\n        applyChange: {\n          value: applyChange,\n          enumerable: true\n        },\n        revertChange: {\n          value: revertChange,\n          enumerable: true\n        },\n        isConflict: {\n          value: function () {\n            return typeof $conflict !== 'undefined';\n          },\n          enumerable: true\n        }\n      });\n\n      // hackish...\n      accumulateDiff.DeepDiff = accumulateDiff;\n      // ...but works with:\n      // import DeepDiff from 'deep-diff'\n      // import { DeepDiff } from 'deep-diff'\n      // const DeepDiff = require('deep-diff');\n      // const { DeepDiff } = require('deep-diff');\n\n      if (root) {\n        root.DeepDiff = accumulateDiff;\n      }\n\n      return accumulateDiff;\n    }));\n    });\n\n    var history = new WeakMap();\n    var AlpineUndoMagicMethod = {\n      start: function start() {\n        var _this = this;\n\n        checkForAlpine();\n        Alpine.addMagicProperty('track', function ($el) {\n          return function (propertiesToWatch) {\n            var _propertiesToWatch;\n\n            propertiesToWatch = (_propertiesToWatch = propertiesToWatch) != null ? _propertiesToWatch : Object.keys(componentData($el));\n            propertiesToWatch = Array.isArray(propertiesToWatch) ? propertiesToWatch : [propertiesToWatch];\n            var initialState = JSON.stringify(componentData($el, propertiesToWatch));\n            updateOnMutation($el, function () {\n              history.has($el.__x) || _this.store($el.__x, {\n                props: propertiesToWatch,\n                previous: initialState\n              });\n              var fresh = componentData($el, history.get($el.__x).props);\n              var previous = JSON.parse(history.get($el.__x).previous);\n              var changes = deepDiff.DeepDiff.diff(previous, fresh, true);\n\n              if (changes && changes.length) {\n                changes = changes.filter(function (change) {\n                  return history.get($el.__x).props.some(function (prop) {\n                    return change.path.join('.').startsWith(prop);\n                  });\n                });\n                history.get($el.__x).previous = JSON.stringify(fresh);\n                history.get($el.__x).changes.push(changes);\n\n                $el.__x.updateElements($el);\n              }\n            });\n          };\n        });\n        Alpine.addMagicProperty('undo', function ($el, $clone) {\n          return function () {\n            if ($el !== $clone) {\n              $el = _this.syncClone($el, $clone);\n            }\n\n            var changes = history.get($el.__x).changes.pop();\n            var previous = JSON.parse(history.get($el.__x).previous);\n            changes && changes.forEach(function (change) {\n              deepDiff.DeepDiff.revertChange(previous, componentData($el, history.get($el.__x).props), change);\n            }); // This could probably be extracted to a utility method like updateComponentProperties()\n\n            if (Object.keys(previous).length) {\n              var newData = {};\n              Object.entries(previous).forEach(function (item) {\n                newData[item[0]] = item[1];\n              });\n              $el.__x.$data = Object.assign($el.__x.$data, newData);\n            }\n\n            history.get($el.__x).previous = JSON.stringify(componentData($el, history.get($el.__x).props));\n          };\n        });\n        Alpine.addMagicProperty('history', function ($el, $clone) {\n          if (!$clone.__x) return [];\n\n          if ($el !== $clone) {\n            $el = _this.syncClone($el, $clone);\n          }\n\n          return history.has($el.__x) ? history.get($el.__x) : [];\n        });\n      },\n      store: function store(key, state) {\n        history.set(key, Object.assign({\n          changes: [],\n\n          get length() {\n            return this.changes.length;\n          }\n\n        }, state));\n        return history.get(key);\n      },\n      syncClone: function syncClone($el, $clone) {\n        this.store($clone.__x, {\n          props: history.get($el.__x).props,\n          previous: history.get($el.__x).previous,\n          changes: history.get($el.__x).changes\n        });\n        return $clone;\n      }\n    };\n\n    var alpine$8 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      alpine$8(callback);\n      AlpineUndoMagicMethod.start();\n    };\n\n    var DIRECTIVE = 'x-unsafe-html';\n\n    var nodeScriptClone = function nodeScriptClone(node) {\n      var script = document.createElement('script');\n      script.text = node.innerHTML;\n\n      for (var i = 0; i < node.attributes.length; i++) {\n        var attr = node.attributes[i];\n        script.setAttribute(attr.name, attr.value);\n      }\n\n      return script;\n    };\n\n    var nodeScriptReplace = function nodeScriptReplace(node) {\n      if (node.tagName && node.tagName.toLowerCase() === 'script') {\n        node.parentNode.replaceChild(nodeScriptClone(node), node);\n      } else {\n        for (var i = 0; i < node.childNodes.length; i++) {\n          nodeScriptReplace(node.childNodes[i]);\n        }\n      }\n\n      return node;\n    };\n\n    var AlpineUnsafeHTMLCustomDirective = {\n      start: function start() {\n        checkForAlpine();\n        Alpine.onBeforeComponentInitialized(function (component) {\n          var legacyResolveBoundAttributes = component.resolveBoundAttributes;\n\n          component.resolveBoundAttributes = function (el, initialUpdate, extraVars) {\n            if (initialUpdate === void 0) {\n              initialUpdate = false;\n            }\n\n            var attrs = Array.from(el.attributes).filter(function (attr) {\n              return attr.name === DIRECTIVE;\n            }).map(parseHtmlAttribute);\n            attrs.forEach(function (_ref) {\n              var expression = _ref.expression;\n              el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);\n              nodeScriptReplace(el);\n            });\n            return legacyResolveBoundAttributes.bind(component)(el, initialUpdate, extraVars);\n          };\n        });\n      }\n    };\n\n    var alpine$9 = window.deferLoadingAlpine || function (alpine) {\n      return alpine();\n    };\n\n    window.deferLoadingAlpine = function (callback) {\n      AlpineUnsafeHTMLCustomDirective.start();\n      alpine$9(callback);\n    };\n\n    var index = {\n      AlpineComponentMagicMethod: AlpineComponentMagicMethod,\n      AlpineFetchMagicMethod: AlpineFetchMagicMethod,\n      AlpineIntervalMagicMethod: AlpineIntervalMagicMethod,\n      AlpineRangeMagicMethod: AlpineRangeMagicMethod,\n      AlpineRefreshMagicMethod: AlpineRefreshMagicMethod,\n      AlpineScreenMagicMethod: AlpineScreenMagicMethod,\n      AlpineScrollMagicMethod: AlpineScrollMagicMethod,\n      AlpineTruncateMagicMethod: AlpineTruncateMagicMethod,\n      AlpineUndoMagicMethod: AlpineUndoMagicMethod,\n      AlpineUnsafeHTMLCustomDirective: AlpineUnsafeHTMLCustomDirective\n    };\n\n    return index;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpine-magic-helpers/dist/index.js\n");

/***/ }),

/***/ "./node_modules/alpinejs/dist/alpine.js":
/*!**********************************************!*\
  !*** ./node_modules/alpinejs/dist/alpine.js ***!
  \**********************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  // Thanks @stimulus:\n  // https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts\n  function domReady() {\n    return new Promise(resolve => {\n      if (document.readyState == \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n  function arrayUnique(array) {\n    return Array.from(new Set(array));\n  }\n  function isTesting() {\n    return navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\");\n  }\n  function checkedAttrLooseCompare(valueA, valueB) {\n    return valueA == valueB;\n  }\n  function warnIfMalformedTemplate(el, directive) {\n    if (el.tagName.toLowerCase() !== 'template') {\n      console.warn(`Alpine: [${directive}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${directive}`);\n    } else if (el.content.childElementCount !== 1) {\n      console.warn(`Alpine: <template> tag with [${directive}] encountered with an unexpected number of root elements. Make sure <template> has a single root element. `);\n    }\n  }\n  function kebabCase(subject) {\n    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\\s]/, '-').toLowerCase();\n  }\n  function camelCase(subject) {\n    return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n  }\n  function walk(el, callback) {\n    if (callback(el) === false) return;\n    let node = el.firstElementChild;\n\n    while (node) {\n      walk(node, callback);\n      node = node.nextElementSibling;\n    }\n  }\n  function debounce(func, wait) {\n    var timeout;\n    return function () {\n      var context = this,\n          args = arguments;\n\n      var later = function later() {\n        timeout = null;\n        func.apply(context, args);\n      };\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  const handleError = (el, expression, error) => {\n    console.warn(`Alpine Error: \"${error}\"\\n\\nExpression: \"${expression}\"\\nElement:`, el);\n\n    if (!isTesting()) {\n      Object.assign(error, {\n        el,\n        expression\n      });\n      throw error;\n    }\n  };\n\n  function tryCatch(cb, {\n    el,\n    expression\n  }) {\n    try {\n      const value = cb();\n      return value instanceof Promise ? value.catch(e => handleError(el, expression, e)) : value;\n    } catch (e) {\n      handleError(el, expression, e);\n    }\n  }\n\n  function saferEval(el, expression, dataContext, additionalHelperVariables = {}) {\n    return tryCatch(() => {\n      if (typeof expression === 'function') {\n        return expression.call(dataContext);\n      }\n\n      return new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`)(dataContext, ...Object.values(additionalHelperVariables));\n    }, {\n      el,\n      expression\n    });\n  }\n  function saferEvalNoReturn(el, expression, dataContext, additionalHelperVariables = {}) {\n    return tryCatch(() => {\n      if (typeof expression === 'function') {\n        return Promise.resolve(expression.call(dataContext, additionalHelperVariables['$event']));\n      }\n\n      let AsyncFunction = Function;\n      /* MODERN-ONLY:START */\n\n      AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n      /* MODERN-ONLY:END */\n      // For the cases when users pass only a function reference to the caller: `x-on:click=\"foo\"`\n      // Where \"foo\" is a function. Also, we'll pass the function the event instance when we call it.\n\n      if (Object.keys(dataContext).includes(expression)) {\n        let methodReference = new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { return ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables));\n\n        if (typeof methodReference === 'function') {\n          return Promise.resolve(methodReference.call(dataContext, additionalHelperVariables['$event']));\n        } else {\n          return Promise.resolve();\n        }\n      }\n\n      return Promise.resolve(new AsyncFunction(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables)));\n    }, {\n      el,\n      expression\n    });\n  }\n  const xAttrRE = /^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\\b/;\n  function isXAttr(attr) {\n    const name = replaceAtAndColonWithStandardSyntax(attr.name);\n    return xAttrRE.test(name);\n  }\n  function getXAttrs(el, component, type) {\n    let directives = Array.from(el.attributes).filter(isXAttr).map(parseHtmlAttribute); // Get an object of directives from x-spread.\n\n    let spreadDirective = directives.filter(directive => directive.type === 'spread')[0];\n\n    if (spreadDirective) {\n      let spreadObject = saferEval(el, spreadDirective.expression, component.$data); // Add x-spread directives to the pile of existing directives.\n\n      directives = directives.concat(Object.entries(spreadObject).map(([name, value]) => parseHtmlAttribute({\n        name,\n        value\n      })));\n    }\n\n    if (type) return directives.filter(i => i.type === type);\n    return sortDirectives(directives);\n  }\n\n  function sortDirectives(directives) {\n    let directiveOrder = ['bind', 'model', 'show', 'catch-all'];\n    return directives.sort((a, b) => {\n      let typeA = directiveOrder.indexOf(a.type) === -1 ? 'catch-all' : a.type;\n      let typeB = directiveOrder.indexOf(b.type) === -1 ? 'catch-all' : b.type;\n      return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n    });\n  }\n\n  function parseHtmlAttribute({\n    name,\n    value\n  }) {\n    const normalizedName = replaceAtAndColonWithStandardSyntax(name);\n    const typeMatch = normalizedName.match(xAttrRE);\n    const valueMatch = normalizedName.match(/:([a-zA-Z0-9\\-:]+)/);\n    const modifiers = normalizedName.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map(i => i.replace('.', '')),\n      expression: value\n    };\n  }\n  function isBooleanAttr(attrName) {\n    // As per HTML spec table https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute\n    // Array roughly ordered by estimated usage\n    const booleanAttributes = ['disabled', 'checked', 'required', 'readonly', 'hidden', 'open', 'selected', 'autofocus', 'itemscope', 'multiple', 'novalidate', 'allowfullscreen', 'allowpaymentrequest', 'formnovalidate', 'autoplay', 'controls', 'loop', 'muted', 'playsinline', 'default', 'ismap', 'reversed', 'async', 'defer', 'nomodule'];\n    return booleanAttributes.includes(attrName);\n  }\n  function replaceAtAndColonWithStandardSyntax(name) {\n    if (name.startsWith('@')) {\n      return name.replace('@', 'x-on:');\n    } else if (name.startsWith(':')) {\n      return name.replace(':', 'x-bind:');\n    }\n\n    return name;\n  }\n  function convertClassStringToArray(classList, filterFn = Boolean) {\n    return classList.split(' ').filter(filterFn);\n  }\n  const TRANSITION_TYPE_IN = 'in';\n  const TRANSITION_TYPE_OUT = 'out';\n  const TRANSITION_CANCELLED = 'cancelled';\n  function transitionIn(el, show, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return show();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_IN) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0]; // If this is triggered by a x-show.transition.\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers; // If x-show.transition.out, we'll skip the \"in\" transition.\n\n      if (modifiers.includes('out') && !modifiers.includes('in')) return show();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out'); // If x-show.transition.in...out... only use \"in\" related modifiers for this transition.\n\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index < modifiers.indexOf('out')) : modifiers;\n      transitionHelperIn(el, modifiers, show, reject); // Otherwise, we can assume x-transition:enter.\n    } else if (attrs.some(attr => ['enter', 'enter-start', 'enter-end'].includes(attr.value))) {\n      transitionClassesIn(el, component, attrs, show, reject);\n    } else {\n      // If neither, just show that damn thing.\n      show();\n    }\n  }\n  function transitionOut(el, hide, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return hide();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_OUT) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0];\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers;\n      if (modifiers.includes('in') && !modifiers.includes('out')) return hide();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out');\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index > modifiers.indexOf('out')) : modifiers;\n      transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hide, reject);\n    } else if (attrs.some(attr => ['leave', 'leave-start', 'leave-end'].includes(attr.value))) {\n      transitionClassesOut(el, component, attrs, hide, reject);\n    } else {\n      hide();\n    }\n  }\n  function transitionHelperIn(el, modifiers, showCallback, reject) {\n    // Default values inspired by: https://material.io/design/motion/speed.html#duration\n    const styleValues = {\n      duration: modifierValue(modifiers, 'duration', 150),\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      },\n      second: {\n        opacity: 1,\n        scale: 100\n      }\n    };\n    transitionHelper(el, modifiers, showCallback, () => {}, reject, styleValues, TRANSITION_TYPE_IN);\n  }\n  function transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hideCallback, reject) {\n    // Make the \"out\" transition .5x slower than the \"in\". (Visually better)\n    // HOWEVER, if they explicitly set a duration for the \"out\" transition,\n    // use that.\n    const duration = settingBothSidesOfTransition ? modifierValue(modifiers, 'duration', 150) : modifierValue(modifiers, 'duration', 150) / 2;\n    const styleValues = {\n      duration: duration,\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 1,\n        scale: 100\n      },\n      second: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      }\n    };\n    transitionHelper(el, modifiers, () => {}, hideCallback, reject, styleValues, TRANSITION_TYPE_OUT);\n  }\n\n  function modifierValue(modifiers, key, fallback) {\n    // If the modifier isn't present, use the default.\n    if (modifiers.indexOf(key) === -1) return fallback; // If it IS present, grab the value after it: x-show.transition.duration.500ms\n\n    const rawValue = modifiers[modifiers.indexOf(key) + 1];\n    if (!rawValue) return fallback;\n\n    if (key === 'scale') {\n      // Check if the very next value is NOT a number and return the fallback.\n      // If x-show.transition.scale, we'll use the default scale value.\n      // That is how a user opts out of the opacity transition.\n      if (!isNumeric(rawValue)) return fallback;\n    }\n\n    if (key === 'duration') {\n      // Support x-show.transition.duration.500ms && duration.500\n      let match = rawValue.match(/([0-9]+)ms/);\n      if (match) return match[1];\n    }\n\n    if (key === 'origin') {\n      // Support chaining origin directions: x-show.transition.top.right\n      if (['top', 'right', 'left', 'center', 'bottom'].includes(modifiers[modifiers.indexOf(key) + 2])) {\n        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(' ');\n      }\n    }\n\n    return rawValue;\n  }\n\n  function transitionHelper(el, modifiers, hook1, hook2, reject, styleValues, type) {\n    // clear the previous transition if exists to avoid caching the wrong styles\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    } // If the user set these style values, we'll put them back when we're done with them.\n\n\n    const opacityCache = el.style.opacity;\n    const transformCache = el.style.transform;\n    const transformOriginCache = el.style.transformOrigin; // If no modifiers are present: x-show.transition, we'll default to both opacity and scale.\n\n    const noModifiers = !modifiers.includes('opacity') && !modifiers.includes('scale');\n    const transitionOpacity = noModifiers || modifiers.includes('opacity');\n    const transitionScale = noModifiers || modifiers.includes('scale'); // These are the explicit stages of a transition (same stages for in and for out).\n    // This way you can get a birds eye view of the hooks, and the differences\n    // between them.\n\n    const stages = {\n      start() {\n        if (transitionOpacity) el.style.opacity = styleValues.first.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.first.scale / 100})`;\n      },\n\n      during() {\n        if (transitionScale) el.style.transformOrigin = styleValues.origin;\n        el.style.transitionProperty = [transitionOpacity ? `opacity` : ``, transitionScale ? `transform` : ``].join(' ').trim();\n        el.style.transitionDuration = `${styleValues.duration / 1000}s`;\n        el.style.transitionTimingFunction = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        if (transitionOpacity) el.style.opacity = styleValues.second.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.second.scale / 100})`;\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        if (transitionOpacity) el.style.opacity = opacityCache;\n        if (transitionScale) el.style.transform = transformCache;\n        if (transitionScale) el.style.transformOrigin = transformOriginCache;\n        el.style.transitionProperty = null;\n        el.style.transitionDuration = null;\n        el.style.transitionTimingFunction = null;\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n\n  const ensureStringExpression = (expression, el, component) => {\n    return typeof expression === 'function' ? component.evaluateReturnExpression(el, expression) : expression;\n  };\n\n  function transitionClassesIn(el, component, directives, showCallback, reject) {\n    const enter = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter') || {\n      expression: ''\n    }).expression, el, component));\n    const enterStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-start') || {\n      expression: ''\n    }).expression, el, component));\n    const enterEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, enter, enterStart, enterEnd, showCallback, () => {}, TRANSITION_TYPE_IN, reject);\n  }\n  function transitionClassesOut(el, component, directives, hideCallback, reject) {\n    const leave = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-start') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, leave, leaveStart, leaveEnd, () => {}, hideCallback, TRANSITION_TYPE_OUT, reject);\n  }\n  function transitionClasses(el, classesDuring, classesStart, classesEnd, hook1, hook2, type, reject) {\n    // clear the previous transition if exists to avoid caching the wrong classes\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    }\n\n    const originalClasses = el.__x_original_classes || [];\n    const stages = {\n      start() {\n        el.classList.add(...classesStart);\n      },\n\n      during() {\n        el.classList.add(...classesDuring);\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        // Don't remove classes that were in the original class attribute.\n        el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)));\n        el.classList.add(...classesEnd);\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)));\n        el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)));\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n  function transition(el, stages, type, reject) {\n    const finish = once(() => {\n      stages.hide(); // Adding an \"isConnected\" check, in case the callback\n      // removed the element from the DOM.\n\n      if (el.isConnected) {\n        stages.cleanup();\n      }\n\n      delete el.__x_transition;\n    });\n    el.__x_transition = {\n      // Set transition type so we can avoid clearing transition if the direction is the same\n      type: type,\n      // create a callback for the last stages of the transition so we can call it\n      // from different point and early terminate it. Once will ensure that function\n      // is only called one time.\n      cancel: once(() => {\n        reject(TRANSITION_CANCELLED);\n        finish();\n      }),\n      finish,\n      // This store the next animation frame so we can cancel it\n      nextFrame: null\n    };\n    stages.start();\n    stages.during();\n    el.__x_transition.nextFrame = requestAnimationFrame(() => {\n      // Note: Safari's transitionDuration property will list out comma separated transition durations\n      // for every single transition property. Let's grab the first one and call it a day.\n      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000;\n\n      if (duration === 0) {\n        duration = Number(getComputedStyle(el).animationDuration.replace('s', '')) * 1000;\n      }\n\n      stages.show();\n      el.__x_transition.nextFrame = requestAnimationFrame(() => {\n        stages.end();\n        setTimeout(el.__x_transition.finish, duration);\n      });\n    });\n  }\n  function isNumeric(subject) {\n    return !Array.isArray(subject) && !isNaN(subject);\n  } // Thanks @vuejs\n  // https://github.com/vuejs/vue/blob/4de4649d9637262a9b007720b59f80ac72a5620c/src/shared/util.js\n\n  function once(callback) {\n    let called = false;\n    return function () {\n      if (!called) {\n        called = true;\n        callback.apply(this, arguments);\n      }\n    };\n  }\n\n  function handleForDirective(component, templateEl, expression, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(templateEl, 'x-for');\n    let iteratorNames = typeof expression === 'function' ? parseForExpression(component.evaluateReturnExpression(templateEl, expression)) : parseForExpression(expression);\n    let items = evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, templateEl, iteratorNames, extraVars); // As we walk the array, we'll also walk the DOM (updating/creating as we go).\n\n    let currentEl = templateEl;\n    items.forEach((item, index) => {\n      let iterationScopeVariables = getIterationScopeVariables(iteratorNames, item, index, items, extraVars());\n      let currentKey = generateKeyForIteration(component, templateEl, index, iterationScopeVariables);\n      let nextEl = lookAheadForMatchingKeyedElementAndMoveItIfFound(currentEl.nextElementSibling, currentKey); // If we haven't found a matching key, insert the element at the current position.\n\n      if (!nextEl) {\n        nextEl = addElementInLoopAfterCurrentEl(templateEl, currentEl); // And transition it in if it's not the first page load.\n\n        transitionIn(nextEl, () => {}, () => {}, component, initialUpdate);\n        nextEl.__x_for = iterationScopeVariables;\n        component.initializeElements(nextEl, () => nextEl.__x_for); // Otherwise update the element we found.\n      } else {\n        // Temporarily remove the key indicator to allow the normal \"updateElements\" to work.\n        delete nextEl.__x_for_key;\n        nextEl.__x_for = iterationScopeVariables;\n        component.updateElements(nextEl, () => nextEl.__x_for);\n      }\n\n      currentEl = nextEl;\n      currentEl.__x_for_key = currentKey;\n    });\n    removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component);\n  } // This was taken from VueJS 2.* core. Thanks Vue!\n\n  function parseForExpression(expression) {\n    let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n    let stripParensRE = /^\\(|\\)$/g;\n    let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n    let inMatch = String(expression).match(forAliasRE);\n    if (!inMatch) return;\n    let res = {};\n    res.items = inMatch[2].trim();\n    let item = inMatch[1].trim().replace(stripParensRE, '');\n    let iteratorMatch = item.match(forIteratorRE);\n\n    if (iteratorMatch) {\n      res.item = item.replace(forIteratorRE, '').trim();\n      res.index = iteratorMatch[1].trim();\n\n      if (iteratorMatch[2]) {\n        res.collection = iteratorMatch[2].trim();\n      }\n    } else {\n      res.item = item;\n    }\n\n    return res;\n  }\n\n  function getIterationScopeVariables(iteratorNames, item, index, items, extraVars) {\n    // We must create a new object, so each iteration has a new scope\n    let scopeVariables = extraVars ? _objectSpread2({}, extraVars) : {};\n    scopeVariables[iteratorNames.item] = item;\n    if (iteratorNames.index) scopeVariables[iteratorNames.index] = index;\n    if (iteratorNames.collection) scopeVariables[iteratorNames.collection] = items;\n    return scopeVariables;\n  }\n\n  function generateKeyForIteration(component, el, index, iterationScopeVariables) {\n    let bindKeyAttribute = getXAttrs(el, component, 'bind').filter(attr => attr.value === 'key')[0]; // If the dev hasn't specified a key, just return the index of the iteration.\n\n    if (!bindKeyAttribute) return index;\n    return component.evaluateReturnExpression(el, bindKeyAttribute.expression, () => iterationScopeVariables);\n  }\n\n  function evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, el, iteratorNames, extraVars) {\n    let ifAttribute = getXAttrs(el, component, 'if')[0];\n\n    if (ifAttribute && !component.evaluateReturnExpression(el, ifAttribute.expression)) {\n      return [];\n    }\n\n    let items = component.evaluateReturnExpression(el, iteratorNames.items, extraVars); // This adds support for the `i in n` syntax.\n\n    if (isNumeric(items) && items >= 0) {\n      items = Array.from(Array(items).keys(), i => i + 1);\n    }\n\n    return items;\n  }\n\n  function addElementInLoopAfterCurrentEl(templateEl, currentEl) {\n    let clone = document.importNode(templateEl.content, true);\n    currentEl.parentElement.insertBefore(clone, currentEl.nextElementSibling);\n    return currentEl.nextElementSibling;\n  }\n\n  function lookAheadForMatchingKeyedElementAndMoveItIfFound(nextEl, currentKey) {\n    if (!nextEl) return; // If we are already past the x-for generated elements, we don't need to look ahead.\n\n    if (nextEl.__x_for_key === undefined) return; // If the the key's DO match, no need to look ahead.\n\n    if (nextEl.__x_for_key === currentKey) return nextEl; // If they don't, we'll look ahead for a match.\n    // If we find it, we'll move it to the current position in the loop.\n\n    let tmpNextEl = nextEl;\n\n    while (tmpNextEl) {\n      if (tmpNextEl.__x_for_key === currentKey) {\n        return tmpNextEl.parentElement.insertBefore(tmpNextEl, nextEl);\n      }\n\n      tmpNextEl = tmpNextEl.nextElementSibling && tmpNextEl.nextElementSibling.__x_for_key !== undefined ? tmpNextEl.nextElementSibling : false;\n    }\n  }\n\n  function removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component) {\n    var nextElementFromOldLoop = currentEl.nextElementSibling && currentEl.nextElementSibling.__x_for_key !== undefined ? currentEl.nextElementSibling : false;\n\n    while (nextElementFromOldLoop) {\n      let nextElementFromOldLoopImmutable = nextElementFromOldLoop;\n      let nextSibling = nextElementFromOldLoop.nextElementSibling;\n      transitionOut(nextElementFromOldLoop, () => {\n        nextElementFromOldLoopImmutable.remove();\n      }, () => {}, component);\n      nextElementFromOldLoop = nextSibling && nextSibling.__x_for_key !== undefined ? nextSibling : false;\n    }\n  }\n\n  function handleAttributeBindingDirective(component, el, attrName, expression, extraVars, attrType, modifiers) {\n    var value = component.evaluateReturnExpression(el, expression, extraVars);\n\n    if (attrName === 'value') {\n      if (Alpine.ignoreFocusedForValueBinding && document.activeElement.isSameNode(el)) return; // If nested model key is undefined, set the default value to empty string.\n\n      if (value === undefined && String(expression).match(/\\./)) {\n        value = '';\n      }\n\n      if (el.type === 'radio') {\n        // Set radio value from x-bind:value, if no \"value\" attribute exists.\n        // If there are any initial state values, radio will have a correct\n        // \"checked\" value since x-bind:value is processed before x-model.\n        if (el.attributes.value === undefined && attrType === 'bind') {\n          el.value = value;\n        } else if (attrType !== 'bind') {\n          el.checked = checkedAttrLooseCompare(el.value, value);\n        }\n      } else if (el.type === 'checkbox') {\n        // If we are explicitly binding a string to the :value, set the string,\n        // If the value is a boolean, leave it alone, it will be set to \"on\"\n        // automatically.\n        if (typeof value !== 'boolean' && ![null, undefined].includes(value) && attrType === 'bind') {\n          el.value = String(value);\n        } else if (attrType !== 'bind') {\n          if (Array.isArray(value)) {\n            // I'm purposely not using Array.includes here because it's\n            // strict, and because of Numeric/String mis-casting, I\n            // want the \"includes\" to be \"fuzzy\".\n            el.checked = value.some(val => checkedAttrLooseCompare(val, el.value));\n          } else {\n            el.checked = !!value;\n          }\n        }\n      } else if (el.tagName === 'SELECT') {\n        updateSelect(el, value);\n      } else {\n        if (el.value === value) return;\n        el.value = value;\n      }\n    } else if (attrName === 'class') {\n      if (Array.isArray(value)) {\n        const originalClasses = el.__x_original_classes || [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '));\n      } else if (typeof value === 'object') {\n        // Sorting the keys / class names by their boolean value will ensure that\n        // anything that evaluates to `false` and needs to remove classes is run first.\n        const keysSortedByBooleanValue = Object.keys(value).sort((a, b) => value[a] - value[b]);\n        keysSortedByBooleanValue.forEach(classNames => {\n          if (value[classNames]) {\n            convertClassStringToArray(classNames).forEach(className => el.classList.add(className));\n          } else {\n            convertClassStringToArray(classNames).forEach(className => el.classList.remove(className));\n          }\n        });\n      } else {\n        const originalClasses = el.__x_original_classes || [];\n        const newClasses = value ? convertClassStringToArray(value) : [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '));\n      }\n    } else {\n      attrName = modifiers.includes('camel') ? camelCase(attrName) : attrName; // If an attribute's bound value is null, undefined or false, remove the attribute\n\n      if ([null, undefined, false].includes(value)) {\n        el.removeAttribute(attrName);\n      } else {\n        isBooleanAttr(attrName) ? setIfChanged(el, attrName, attrName) : setIfChanged(el, attrName, value);\n      }\n    }\n  }\n\n  function setIfChanged(el, attrName, value) {\n    if (el.getAttribute(attrName) != value) {\n      el.setAttribute(attrName, value);\n    }\n  }\n\n  function updateSelect(el, value) {\n    const arrayWrappedValue = [].concat(value).map(value => {\n      return value + '';\n    });\n    Array.from(el.options).forEach(option => {\n      option.selected = arrayWrappedValue.includes(option.value || option.text);\n    });\n  }\n\n  function handleTextDirective(el, output, expression) {\n    // If nested model key is undefined, set the default value to empty string.\n    if (output === undefined && String(expression).match(/\\./)) {\n      output = '';\n    }\n\n    el.textContent = output;\n  }\n\n  function handleHtmlDirective(component, el, expression, extraVars) {\n    el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);\n  }\n\n  function handleShowDirective(component, el, value, modifiers, initialUpdate = false) {\n    const hide = () => {\n      el.style.display = 'none';\n      el.__x_is_shown = false;\n    };\n\n    const show = () => {\n      if (el.style.length === 1 && el.style.display === 'none') {\n        el.removeAttribute('style');\n      } else {\n        el.style.removeProperty('display');\n      }\n\n      el.__x_is_shown = true;\n    };\n\n    if (initialUpdate === true) {\n      if (value) {\n        show();\n      } else {\n        hide();\n      }\n\n      return;\n    }\n\n    const handle = (resolve, reject) => {\n      if (value) {\n        if (el.style.display === 'none' || el.__x_transition) {\n          transitionIn(el, () => {\n            show();\n          }, reject, component);\n        }\n\n        resolve(() => {});\n      } else {\n        if (el.style.display !== 'none') {\n          transitionOut(el, () => {\n            resolve(() => {\n              hide();\n            });\n          }, reject, component);\n        } else {\n          resolve(() => {});\n        }\n      }\n    }; // The working of x-show is a bit complex because we need to\n    // wait for any child transitions to finish before hiding\n    // some element. Also, this has to be done recursively.\n    // If x-show.immediate, foregoe the waiting.\n\n\n    if (modifiers.includes('immediate')) {\n      handle(finish => finish(), () => {});\n      return;\n    } // x-show is encountered during a DOM tree walk. If an element\n    // we encounter is NOT a child of another x-show element we\n    // can execute the previous x-show stack (if one exists).\n\n\n    if (component.showDirectiveLastElement && !component.showDirectiveLastElement.contains(el)) {\n      component.executeAndClearRemainingShowDirectiveStack();\n    }\n\n    component.showDirectiveStack.push(handle);\n    component.showDirectiveLastElement = el;\n  }\n\n  function handleIfDirective(component, el, expressionResult, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(el, 'x-if');\n    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true;\n\n    if (expressionResult && (!elementHasAlreadyBeenAdded || el.__x_transition)) {\n      const clone = document.importNode(el.content, true);\n      el.parentElement.insertBefore(clone, el.nextElementSibling);\n      transitionIn(el.nextElementSibling, () => {}, () => {}, component, initialUpdate);\n      component.initializeElements(el.nextElementSibling, extraVars);\n      el.nextElementSibling.__x_inserted_me = true;\n    } else if (!expressionResult && elementHasAlreadyBeenAdded) {\n      transitionOut(el.nextElementSibling, () => {\n        el.nextElementSibling.remove();\n      }, () => {}, component, initialUpdate);\n    }\n  }\n\n  function registerListener(component, el, event, modifiers, expression, extraVars = {}) {\n    const options = {\n      passive: modifiers.includes('passive')\n    };\n\n    if (modifiers.includes('camel')) {\n      event = camelCase(event);\n    }\n\n    let handler, listenerTarget;\n\n    if (modifiers.includes('away')) {\n      listenerTarget = document;\n\n      handler = e => {\n        // Don't do anything if the click came from the element or within it.\n        if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.\n\n        if (el.offsetWidth < 1 && el.offsetHeight < 1) return; // Now that we are sure the element is visible, AND the click\n        // is from outside it, let's run the expression.\n\n        runListenerHandler(component, expression, e, extraVars);\n\n        if (modifiers.includes('once')) {\n          document.removeEventListener(event, handler, options);\n        }\n      };\n    } else {\n      listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;\n\n      handler = e => {\n        // Remove this global event handler if the element that declared it\n        // has been removed. It's now stale.\n        if (listenerTarget === window || listenerTarget === document) {\n          if (!document.body.contains(el)) {\n            listenerTarget.removeEventListener(event, handler, options);\n            return;\n          }\n        }\n\n        if (isKeyEvent(event)) {\n          if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n            return;\n          }\n        }\n\n        if (modifiers.includes('prevent')) e.preventDefault();\n        if (modifiers.includes('stop')) e.stopPropagation(); // If the .self modifier isn't present, or if it is present and\n        // the target element matches the element we are registering the\n        // event on, run the handler\n\n        if (!modifiers.includes('self') || e.target === el) {\n          const returnValue = runListenerHandler(component, expression, e, extraVars);\n          returnValue.then(value => {\n            if (value === false) {\n              e.preventDefault();\n            } else {\n              if (modifiers.includes('once')) {\n                listenerTarget.removeEventListener(event, handler, options);\n              }\n            }\n          });\n        }\n      };\n    }\n\n    if (modifiers.includes('debounce')) {\n      let nextModifier = modifiers[modifiers.indexOf('debounce') + 1] || 'invalid-wait';\n      let wait = isNumeric(nextModifier.split('ms')[0]) ? Number(nextModifier.split('ms')[0]) : 250;\n      handler = debounce(handler, wait);\n    }\n\n    listenerTarget.addEventListener(event, handler, options);\n  }\n\n  function runListenerHandler(component, expression, e, extraVars) {\n    return component.evaluateCommandExpression(e.target, expression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        '$event': e\n      });\n    });\n  }\n\n  function isKeyEvent(event) {\n    return ['keydown', 'keyup'].includes(event);\n  }\n\n  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n    let keyModifiers = modifiers.filter(i => {\n      return !['window', 'document', 'prevent', 'stop'].includes(i);\n    });\n\n    if (keyModifiers.includes('debounce')) {\n      let debounceIndex = keyModifiers.indexOf('debounce');\n      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || 'invalid-wait').split('ms')[0]) ? 2 : 1);\n    } // If no modifier is specified, we'll call it a press.\n\n\n    if (keyModifiers.length === 0) return false; // If one is passed, AND it matches the key pressed, we'll call it a press.\n\n    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false; // The user is listening for key combinations.\n\n    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super'];\n    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier));\n    keyModifiers = keyModifiers.filter(i => !selectedSystemKeyModifiers.includes(i));\n\n    if (selectedSystemKeyModifiers.length > 0) {\n      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {\n        // Alias \"cmd\" and \"super\" to \"meta\"\n        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta';\n        return e[`${modifier}Key`];\n      }); // If all the modifiers selected are pressed, ...\n\n      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n        // AND the remaining key is pressed as well. It's a press.\n        if (keyModifiers[0] === keyToModifier(e.key)) return false;\n      }\n    } // We'll call it NOT a valid keypress.\n\n\n    return true;\n  }\n\n  function keyToModifier(key) {\n    switch (key) {\n      case '/':\n        return 'slash';\n\n      case ' ':\n      case 'Spacebar':\n        return 'space';\n\n      default:\n        return key && kebabCase(key);\n    }\n  }\n\n  function registerModelListener(component, el, modifiers, expression, extraVars) {\n    // If the element we are binding to is a select, a radio, or checkbox\n    // we'll listen for the change event instead of the \"input\" event.\n    var event = el.tagName.toLowerCase() === 'select' || ['checkbox', 'radio'].includes(el.type) || modifiers.includes('lazy') ? 'change' : 'input';\n    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`;\n    registerListener(component, el, event, modifiers, listenerExpression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression)\n      });\n    });\n  }\n\n  function generateModelAssignmentFunction(el, modifiers, expression) {\n    if (el.type === 'radio') {\n      // Radio buttons only work properly when they share a name attribute.\n      // People might assume we take care of that for them, because\n      // they already set a shared \"x-model\" attribute.\n      if (!el.hasAttribute('name')) el.setAttribute('name', expression);\n    }\n\n    return (event, currentValue) => {\n      // Check for event.detail due to an issue where IE11 handles other events as a CustomEvent.\n      if (event instanceof CustomEvent && event.detail) {\n        return event.detail;\n      } else if (el.type === 'checkbox') {\n        // If the data we are binding to is an array, toggle its value inside the array.\n        if (Array.isArray(currentValue)) {\n          const newValue = modifiers.includes('number') ? safeParseNumber(event.target.value) : event.target.value;\n          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter(el => !checkedAttrLooseCompare(el, newValue));\n        } else {\n          return event.target.checked;\n        }\n      } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {\n        return modifiers.includes('number') ? Array.from(event.target.selectedOptions).map(option => {\n          const rawValue = option.value || option.text;\n          return safeParseNumber(rawValue);\n        }) : Array.from(event.target.selectedOptions).map(option => {\n          return option.value || option.text;\n        });\n      } else {\n        const rawValue = event.target.value;\n        return modifiers.includes('number') ? safeParseNumber(rawValue) : modifiers.includes('trim') ? rawValue.trim() : rawValue;\n      }\n    };\n  }\n\n  function safeParseNumber(rawValue) {\n    const number = rawValue ? parseFloat(rawValue) : null;\n    return isNumeric(number) ? number : rawValue;\n  }\n\n  /**\n   * Copyright (C) 2017 salesforce.com, inc.\n   */\n  const { isArray } = Array;\n  const { getPrototypeOf, create: ObjectCreate, defineProperty: ObjectDefineProperty, defineProperties: ObjectDefineProperties, isExtensible, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, preventExtensions, hasOwnProperty, } = Object;\n  const { push: ArrayPush, concat: ArrayConcat, map: ArrayMap, } = Array.prototype;\n  function isUndefined(obj) {\n      return obj === undefined;\n  }\n  function isFunction(obj) {\n      return typeof obj === 'function';\n  }\n  function isObject(obj) {\n      return typeof obj === 'object';\n  }\n  const proxyToValueMap = new WeakMap();\n  function registerProxy(proxy, value) {\n      proxyToValueMap.set(proxy, value);\n  }\n  const unwrap = (replicaOrAny) => proxyToValueMap.get(replicaOrAny) || replicaOrAny;\n\n  function wrapValue(membrane, value) {\n      return membrane.valueIsObservable(value) ? membrane.getProxy(value) : value;\n  }\n  /**\n   * Unwrap property descriptors will set value on original descriptor\n   * We only need to unwrap if value is specified\n   * @param descriptor external descrpitor provided to define new property on original value\n   */\n  function unwrapDescriptor(descriptor) {\n      if (hasOwnProperty.call(descriptor, 'value')) {\n          descriptor.value = unwrap(descriptor.value);\n      }\n      return descriptor;\n  }\n  function lockShadowTarget(membrane, shadowTarget, originalTarget) {\n      const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      targetKeys.forEach((key) => {\n          let descriptor = getOwnPropertyDescriptor(originalTarget, key);\n          // We do not need to wrap the descriptor if configurable\n          // Because we can deal with wrapping it when user goes through\n          // Get own property descriptor. There is also a chance that this descriptor\n          // could change sometime in the future, so we can defer wrapping\n          // until we need to\n          if (!descriptor.configurable) {\n              descriptor = wrapDescriptor(membrane, descriptor, wrapValue);\n          }\n          ObjectDefineProperty(shadowTarget, key, descriptor);\n      });\n      preventExtensions(shadowTarget);\n  }\n  class ReactiveProxyHandler {\n      constructor(membrane, value) {\n          this.originalTarget = value;\n          this.membrane = membrane;\n      }\n      get(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const value = originalTarget[key];\n          const { valueObserved } = membrane;\n          valueObserved(originalTarget, key);\n          return membrane.getProxy(value);\n      }\n      set(shadowTarget, key, value) {\n          const { originalTarget, membrane: { valueMutated } } = this;\n          const oldValue = originalTarget[key];\n          if (oldValue !== value) {\n              originalTarget[key] = value;\n              valueMutated(originalTarget, key);\n          }\n          else if (key === 'length' && isArray(originalTarget)) {\n              // fix for issue #236: push will add the new index, and by the time length\n              // is updated, the internal length is already equal to the new length value\n              // therefore, the oldValue is equal to the value. This is the forking logic\n              // to support this use case.\n              valueMutated(originalTarget, key);\n          }\n          return true;\n      }\n      deleteProperty(shadowTarget, key) {\n          const { originalTarget, membrane: { valueMutated } } = this;\n          delete originalTarget[key];\n          valueMutated(originalTarget, key);\n          return true;\n      }\n      apply(shadowTarget, thisArg, argArray) {\n          /* No op */\n      }\n      construct(target, argArray, newTarget) {\n          /* No op */\n      }\n      has(shadowTarget, key) {\n          const { originalTarget, membrane: { valueObserved } } = this;\n          valueObserved(originalTarget, key);\n          return key in originalTarget;\n      }\n      ownKeys(shadowTarget) {\n          const { originalTarget } = this;\n          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      }\n      isExtensible(shadowTarget) {\n          const shadowIsExtensible = isExtensible(shadowTarget);\n          if (!shadowIsExtensible) {\n              return shadowIsExtensible;\n          }\n          const { originalTarget, membrane } = this;\n          const targetIsExtensible = isExtensible(originalTarget);\n          if (!targetIsExtensible) {\n              lockShadowTarget(membrane, shadowTarget, originalTarget);\n          }\n          return targetIsExtensible;\n      }\n      setPrototypeOf(shadowTarget, prototype) {\n      }\n      getPrototypeOf(shadowTarget) {\n          const { originalTarget } = this;\n          return getPrototypeOf(originalTarget);\n      }\n      getOwnPropertyDescriptor(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const { valueObserved } = this.membrane;\n          // keys looked up via hasOwnProperty need to be reactive\n          valueObserved(originalTarget, key);\n          let desc = getOwnPropertyDescriptor(originalTarget, key);\n          if (isUndefined(desc)) {\n              return desc;\n          }\n          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n          if (!isUndefined(shadowDescriptor)) {\n              return shadowDescriptor;\n          }\n          // Note: by accessing the descriptor, the key is marked as observed\n          // but access to the value, setter or getter (if available) cannot observe\n          // mutations, just like regular methods, in which case we just do nothing.\n          desc = wrapDescriptor(membrane, desc, wrapValue);\n          if (!desc.configurable) {\n              // If descriptor from original target is not configurable,\n              // We must copy the wrapped descriptor over to the shadow target.\n              // Otherwise, proxy will throw an invariant error.\n              // This is our last chance to lock the value.\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n              ObjectDefineProperty(shadowTarget, key, desc);\n          }\n          return desc;\n      }\n      preventExtensions(shadowTarget) {\n          const { originalTarget, membrane } = this;\n          lockShadowTarget(membrane, shadowTarget, originalTarget);\n          preventExtensions(originalTarget);\n          return true;\n      }\n      defineProperty(shadowTarget, key, descriptor) {\n          const { originalTarget, membrane } = this;\n          const { valueMutated } = membrane;\n          const { configurable } = descriptor;\n          // We have to check for value in descriptor\n          // because Object.freeze(proxy) calls this method\n          // with only { configurable: false, writeable: false }\n          // Additionally, method will only be called with writeable:false\n          // if the descriptor has a value, as opposed to getter/setter\n          // So we can just check if writable is present and then see if\n          // value is present. This eliminates getter and setter descriptors\n          if (hasOwnProperty.call(descriptor, 'writable') && !hasOwnProperty.call(descriptor, 'value')) {\n              const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);\n              descriptor.value = originalDescriptor.value;\n          }\n          ObjectDefineProperty(originalTarget, key, unwrapDescriptor(descriptor));\n          if (configurable === false) {\n              ObjectDefineProperty(shadowTarget, key, wrapDescriptor(membrane, descriptor, wrapValue));\n          }\n          valueMutated(originalTarget, key);\n          return true;\n      }\n  }\n\n  function wrapReadOnlyValue(membrane, value) {\n      return membrane.valueIsObservable(value) ? membrane.getReadOnlyProxy(value) : value;\n  }\n  class ReadOnlyHandler {\n      constructor(membrane, value) {\n          this.originalTarget = value;\n          this.membrane = membrane;\n      }\n      get(shadowTarget, key) {\n          const { membrane, originalTarget } = this;\n          const value = originalTarget[key];\n          const { valueObserved } = membrane;\n          valueObserved(originalTarget, key);\n          return membrane.getReadOnlyProxy(value);\n      }\n      set(shadowTarget, key, value) {\n          return false;\n      }\n      deleteProperty(shadowTarget, key) {\n          return false;\n      }\n      apply(shadowTarget, thisArg, argArray) {\n          /* No op */\n      }\n      construct(target, argArray, newTarget) {\n          /* No op */\n      }\n      has(shadowTarget, key) {\n          const { originalTarget, membrane: { valueObserved } } = this;\n          valueObserved(originalTarget, key);\n          return key in originalTarget;\n      }\n      ownKeys(shadowTarget) {\n          const { originalTarget } = this;\n          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      }\n      setPrototypeOf(shadowTarget, prototype) {\n      }\n      getOwnPropertyDescriptor(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const { valueObserved } = membrane;\n          // keys looked up via hasOwnProperty need to be reactive\n          valueObserved(originalTarget, key);\n          let desc = getOwnPropertyDescriptor(originalTarget, key);\n          if (isUndefined(desc)) {\n              return desc;\n          }\n          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n          if (!isUndefined(shadowDescriptor)) {\n              return shadowDescriptor;\n          }\n          // Note: by accessing the descriptor, the key is marked as observed\n          // but access to the value or getter (if available) cannot be observed,\n          // just like regular methods, in which case we just do nothing.\n          desc = wrapDescriptor(membrane, desc, wrapReadOnlyValue);\n          if (hasOwnProperty.call(desc, 'set')) {\n              desc.set = undefined; // readOnly membrane does not allow setters\n          }\n          if (!desc.configurable) {\n              // If descriptor from original target is not configurable,\n              // We must copy the wrapped descriptor over to the shadow target.\n              // Otherwise, proxy will throw an invariant error.\n              // This is our last chance to lock the value.\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n              ObjectDefineProperty(shadowTarget, key, desc);\n          }\n          return desc;\n      }\n      preventExtensions(shadowTarget) {\n          return false;\n      }\n      defineProperty(shadowTarget, key, descriptor) {\n          return false;\n      }\n  }\n  function createShadowTarget(value) {\n      let shadowTarget = undefined;\n      if (isArray(value)) {\n          shadowTarget = [];\n      }\n      else if (isObject(value)) {\n          shadowTarget = {};\n      }\n      return shadowTarget;\n  }\n  const ObjectDotPrototype = Object.prototype;\n  function defaultValueIsObservable(value) {\n      // intentionally checking for null\n      if (value === null) {\n          return false;\n      }\n      // treat all non-object types, including undefined, as non-observable values\n      if (typeof value !== 'object') {\n          return false;\n      }\n      if (isArray(value)) {\n          return true;\n      }\n      const proto = getPrototypeOf(value);\n      return (proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null);\n  }\n  const defaultValueObserved = (obj, key) => {\n      /* do nothing */\n  };\n  const defaultValueMutated = (obj, key) => {\n      /* do nothing */\n  };\n  const defaultValueDistortion = (value) => value;\n  function wrapDescriptor(membrane, descriptor, getValue) {\n      const { set, get } = descriptor;\n      if (hasOwnProperty.call(descriptor, 'value')) {\n          descriptor.value = getValue(membrane, descriptor.value);\n      }\n      else {\n          if (!isUndefined(get)) {\n              descriptor.get = function () {\n                  // invoking the original getter with the original target\n                  return getValue(membrane, get.call(unwrap(this)));\n              };\n          }\n          if (!isUndefined(set)) {\n              descriptor.set = function (value) {\n                  // At this point we don't have a clear indication of whether\n                  // or not a valid mutation will occur, we don't have the key,\n                  // and we are not sure why and how they are invoking this setter.\n                  // Nevertheless we preserve the original semantics by invoking the\n                  // original setter with the original target and the unwrapped value\n                  set.call(unwrap(this), membrane.unwrapProxy(value));\n              };\n          }\n      }\n      return descriptor;\n  }\n  class ReactiveMembrane {\n      constructor(options) {\n          this.valueDistortion = defaultValueDistortion;\n          this.valueMutated = defaultValueMutated;\n          this.valueObserved = defaultValueObserved;\n          this.valueIsObservable = defaultValueIsObservable;\n          this.objectGraph = new WeakMap();\n          if (!isUndefined(options)) {\n              const { valueDistortion, valueMutated, valueObserved, valueIsObservable } = options;\n              this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;\n              this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;\n              this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;\n              this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;\n          }\n      }\n      getProxy(value) {\n          const unwrappedValue = unwrap(value);\n          const distorted = this.valueDistortion(unwrappedValue);\n          if (this.valueIsObservable(distorted)) {\n              const o = this.getReactiveState(unwrappedValue, distorted);\n              // when trying to extract the writable version of a readonly\n              // we return the readonly.\n              return o.readOnly === value ? value : o.reactive;\n          }\n          return distorted;\n      }\n      getReadOnlyProxy(value) {\n          value = unwrap(value);\n          const distorted = this.valueDistortion(value);\n          if (this.valueIsObservable(distorted)) {\n              return this.getReactiveState(value, distorted).readOnly;\n          }\n          return distorted;\n      }\n      unwrapProxy(p) {\n          return unwrap(p);\n      }\n      getReactiveState(value, distortedValue) {\n          const { objectGraph, } = this;\n          let reactiveState = objectGraph.get(distortedValue);\n          if (reactiveState) {\n              return reactiveState;\n          }\n          const membrane = this;\n          reactiveState = {\n              get reactive() {\n                  const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue);\n                  // caching the reactive proxy after the first time it is accessed\n                  const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);\n                  registerProxy(proxy, value);\n                  ObjectDefineProperty(this, 'reactive', { value: proxy });\n                  return proxy;\n              },\n              get readOnly() {\n                  const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue);\n                  // caching the readOnly proxy after the first time it is accessed\n                  const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);\n                  registerProxy(proxy, value);\n                  ObjectDefineProperty(this, 'readOnly', { value: proxy });\n                  return proxy;\n              }\n          };\n          objectGraph.set(distortedValue, reactiveState);\n          return reactiveState;\n      }\n  }\n  /** version: 0.26.0 */\n\n  function wrap(data, mutationCallback) {\n\n    let membrane = new ReactiveMembrane({\n      valueMutated(target, key) {\n        mutationCallback(target, key);\n      }\n\n    });\n    return {\n      data: membrane.getProxy(data),\n      membrane: membrane\n    };\n  }\n  function unwrap$1(membrane, observable) {\n    let unwrappedData = membrane.unwrapProxy(observable);\n    let copy = {};\n    Object.keys(unwrappedData).forEach(key => {\n      if (['$el', '$refs', '$nextTick', '$watch'].includes(key)) return;\n      copy[key] = unwrappedData[key];\n    });\n    return copy;\n  }\n\n  class Component {\n    constructor(el, componentForClone = null) {\n      this.$el = el;\n      const dataAttr = this.$el.getAttribute('x-data');\n      const dataExpression = dataAttr === '' ? '{}' : dataAttr;\n      const initExpression = this.$el.getAttribute('x-init');\n      let dataExtras = {\n        $el: this.$el\n      };\n      let canonicalComponentElementReference = componentForClone ? componentForClone.$el : this.$el;\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(dataExtras, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference);\n          }\n        });\n      });\n      this.unobservedData = componentForClone ? componentForClone.getUnobservedData() : saferEval(el, dataExpression, dataExtras);\n      // Construct a Proxy-based observable. This will be used to handle reactivity.\n\n      let {\n        membrane,\n        data\n      } = this.wrapDataInObservable(this.unobservedData);\n      this.$data = data;\n      this.membrane = membrane; // After making user-supplied data methods reactive, we can now add\n      // our magic properties to the original data for access.\n\n      this.unobservedData.$el = this.$el;\n      this.unobservedData.$refs = this.getRefsProxy();\n      this.nextTickStack = [];\n\n      this.unobservedData.$nextTick = callback => {\n        this.nextTickStack.push(callback);\n      };\n\n      this.watchers = {};\n\n      this.unobservedData.$watch = (property, callback) => {\n        if (!this.watchers[property]) this.watchers[property] = [];\n        this.watchers[property].push(callback);\n      };\n      /* MODERN-ONLY:START */\n      // We remove this piece of code from the legacy build.\n      // In IE11, we have already defined our helpers at this point.\n      // Register custom magic properties.\n\n\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(this.unobservedData, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference, this.$el);\n          }\n        });\n      });\n      /* MODERN-ONLY:END */\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement;\n      componentForClone || Alpine.onBeforeComponentInitializeds.forEach(callback => callback(this));\n      var initReturnedCallback; // If x-init is present AND we aren't cloning (skip x-init on clone)\n\n      if (initExpression && !componentForClone) {\n        // We want to allow data manipulation, but not trigger DOM updates just yet.\n        // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.\n        this.pauseReactivity = true;\n        initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression);\n        this.pauseReactivity = false;\n      } // Register all our listeners and set all our attribute bindings.\n      // If we're cloning a component, the third parameter ensures no duplicate\n      // event listeners are registered (the mutation observer will take care of them)\n\n\n      this.initializeElements(this.$el, () => {}, componentForClone); // Use mutation observer to detect new elements being added within this component at run-time.\n      // Alpine's just so darn flexible amirite?\n\n      this.listenForNewElementsToInitialize();\n\n      if (typeof initReturnedCallback === 'function') {\n        // Run the callback returned from the \"x-init\" hook to allow the user to do stuff after\n        // Alpine's got it's grubby little paws all over everything.\n        initReturnedCallback.call(this.$data);\n      }\n\n      componentForClone || setTimeout(() => {\n        Alpine.onComponentInitializeds.forEach(callback => callback(this));\n      }, 0);\n    }\n\n    getUnobservedData() {\n      return unwrap$1(this.membrane, this.$data);\n    }\n\n    wrapDataInObservable(data) {\n      var self = this;\n      let updateDom = debounce(function () {\n        self.updateElements(self.$el);\n      }, 0);\n      return wrap(data, (target, key) => {\n        if (self.watchers[key]) {\n          // If there's a watcher for this specific key, run it.\n          self.watchers[key].forEach(callback => callback(target[key]));\n        } else if (Array.isArray(target)) {\n          // Arrays are special cases, if any of the items change, we consider the array as mutated.\n          Object.keys(self.watchers).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // Ignore length mutations since they would result in duplicate calls.\n            // For example, when calling push, we would get a mutation for the item's key\n            // and a second mutation for the length property.\n\n            if (key === 'length') return;\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData[part])) {\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } else {\n          // Let's walk through the watchers with \"dot-notation\" (foo.bar) and see\n          // if this mutation fits any of them.\n          Object.keys(self.watchers).filter(i => i.includes('.')).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // If this dot-notation watcher's last \"part\" doesn't match the current\n            // key, then skip it early for performance reasons.\n\n            if (key !== dotNotationParts[dotNotationParts.length - 1]) return; // Now, walk through the dot-notation \"parts\" recursively to find\n            // a match, and call the watcher if one's found.\n\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData)) {\n                // Run the watchers.\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target[key]));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } // Don't react to data changes for cases like the `x-created` hook.\n\n\n        if (self.pauseReactivity) return;\n        updateDom();\n      });\n    }\n\n    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {\n      walk(el, el => {\n        // We've hit a component.\n        if (el.hasAttribute('x-data')) {\n          // If it's not the current one.\n          if (!el.isSameNode(this.$el)) {\n            // Initialize it if it's not.\n            if (!el.__x) initializeComponentCallback(el); // Now we'll let that sub-component deal with itself.\n\n            return false;\n          }\n        }\n\n        return callback(el);\n      });\n    }\n\n    initializeElements(rootEl, extraVars = () => {}, componentForClone = false) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop\n        if (el.__x_for_key !== undefined) return false; // Don't touch spawns from if directives\n\n        if (el.__x_inserted_me !== undefined) return false;\n        this.initializeElement(el, extraVars, componentForClone ? false : true);\n      }, el => {\n        if (!componentForClone) el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    initializeElement(el, extraVars, shouldRegisterListeners = true) {\n      // To support class attribute merging, we have to know what the element's\n      // original class attribute looked like for reference.\n      if (el.hasAttribute('class') && getXAttrs(el, this).length > 0) {\n        el.__x_original_classes = convertClassStringToArray(el.getAttribute('class'));\n      }\n\n      shouldRegisterListeners && this.registerListeners(el, extraVars);\n      this.resolveBoundAttributes(el, true, extraVars);\n    }\n\n    updateElements(rootEl, extraVars = () => {}) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)\n        if (el.__x_for_key !== undefined && !el.isSameNode(this.$el)) return false;\n        this.updateElement(el, extraVars);\n      }, el => {\n        el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    executeAndClearNextTickStack(el) {\n      // Skip spawns from alpine directives\n      if (el === this.$el && this.nextTickStack.length > 0) {\n        // We run the tick stack after the next frame to allow any\n        // running transitions to pass the initial show stage.\n        requestAnimationFrame(() => {\n          while (this.nextTickStack.length > 0) {\n            this.nextTickStack.shift()();\n          }\n        });\n      }\n    }\n\n    executeAndClearRemainingShowDirectiveStack() {\n      // The goal here is to start all the x-show transitions\n      // and build a nested promise chain so that elements\n      // only hide when the children are finished hiding.\n      this.showDirectiveStack.reverse().map(handler => {\n        return new Promise((resolve, reject) => {\n          handler(resolve, reject);\n        });\n      }).reduce((promiseChain, promise) => {\n        return promiseChain.then(() => {\n          return promise.then(finishElement => {\n            finishElement();\n          });\n        });\n      }, Promise.resolve(() => {})).catch(e => {\n        if (e !== TRANSITION_CANCELLED) throw e;\n      }); // We've processed the handler stack. let's clear it.\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement = undefined;\n    }\n\n    updateElement(el, extraVars) {\n      this.resolveBoundAttributes(el, false, extraVars);\n    }\n\n    registerListeners(el, extraVars) {\n      getXAttrs(el, this).forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'on':\n            registerListener(this, el, value, modifiers, expression, extraVars);\n            break;\n\n          case 'model':\n            registerModelListener(this, el, modifiers, expression, extraVars);\n            break;\n        }\n      });\n    }\n\n    resolveBoundAttributes(el, initialUpdate = false, extraVars) {\n      let attrs = getXAttrs(el, this);\n      attrs.forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'model':\n            handleAttributeBindingDirective(this, el, 'value', expression, extraVars, type, modifiers);\n            break;\n\n          case 'bind':\n            // The :key binding on an x-for is special, ignore it.\n            if (el.tagName.toLowerCase() === 'template' && value === 'key') return;\n            handleAttributeBindingDirective(this, el, value, expression, extraVars, type, modifiers);\n            break;\n\n          case 'text':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleTextDirective(el, output, expression);\n            break;\n\n          case 'html':\n            handleHtmlDirective(this, el, expression, extraVars);\n            break;\n\n          case 'show':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleShowDirective(this, el, output, modifiers, initialUpdate);\n            break;\n\n          case 'if':\n            // If this element also has x-for on it, don't process x-if.\n            // We will let the \"x-for\" directive handle the \"if\"ing.\n            if (attrs.some(i => i.type === 'for')) return;\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleIfDirective(this, el, output, initialUpdate, extraVars);\n            break;\n\n          case 'for':\n            handleForDirective(this, el, expression, initialUpdate, extraVars);\n            break;\n\n          case 'cloak':\n            el.removeAttribute('x-cloak');\n            break;\n        }\n      });\n    }\n\n    evaluateReturnExpression(el, expression, extraVars = () => {}) {\n      return saferEval(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    evaluateCommandExpression(el, expression, extraVars = () => {}) {\n      return saferEvalNoReturn(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    getDispatchFunction(el) {\n      return (event, detail = {}) => {\n        el.dispatchEvent(new CustomEvent(event, {\n          detail,\n          bubbles: true\n        }));\n      };\n    }\n\n    listenForNewElementsToInitialize() {\n      const targetNode = this.$el;\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) {\n          // Filter out mutations triggered from child components.\n          const closestParentComponent = mutations[i].target.closest('[x-data]');\n          if (!(closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue;\n\n          if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {\n            const xAttr = mutations[i].target.getAttribute('x-data') || '{}';\n            const rawData = saferEval(this.$el, xAttr, {\n              $el: this.$el\n            });\n            Object.keys(rawData).forEach(key => {\n              if (this.$data[key] !== rawData[key]) {\n                this.$data[key] = rawData[key];\n              }\n            });\n          }\n\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              if (node.nodeType !== 1 || node.__x_inserted_me) return;\n\n              if (node.matches('[x-data]') && !node.__x) {\n                node.__x = new Component(node);\n                return;\n              }\n\n              this.initializeElements(node);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    }\n\n    getRefsProxy() {\n      var self = this;\n      var refObj = {};\n      // One of the goals of this is to not hold elements in memory, but rather re-evaluate\n      // the DOM when the system needs something from it. This way, the framework is flexible and\n      // friendly to outside DOM changes from libraries like Vue/Livewire.\n      // For this reason, I'm using an \"on-demand\" proxy to fake a \"$refs\" object.\n\n      return new Proxy(refObj, {\n        get(object, property) {\n          if (property === '$isAlpineProxy') return true;\n          var ref; // We can't just query the DOM because it's hard to filter out refs in\n          // nested components.\n\n          self.walkAndSkipNestedComponents(self.$el, el => {\n            if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {\n              ref = el;\n            }\n          });\n          return ref;\n        }\n\n      });\n    }\n\n  }\n\n  const Alpine = {\n    version: \"2.8.2\",\n    pauseMutationObserver: false,\n    magicProperties: {},\n    onComponentInitializeds: [],\n    onBeforeComponentInitializeds: [],\n    ignoreFocusedForValueBinding: false,\n    start: async function start() {\n      if (!isTesting()) {\n        await domReady();\n      }\n\n      this.discoverComponents(el => {\n        this.initializeComponent(el);\n      }); // It's easier and more performant to just support Turbolinks than listen\n      // to MutationObserver mutations at the document level.\n\n      document.addEventListener(\"turbolinks:load\", () => {\n        this.discoverUninitializedComponents(el => {\n          this.initializeComponent(el);\n        });\n      });\n      this.listenForNewUninitializedComponentsAtRunTime();\n    },\n    discoverComponents: function discoverComponents(callback) {\n      const rootEls = document.querySelectorAll('[x-data]');\n      rootEls.forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    discoverUninitializedComponents: function discoverUninitializedComponents(callback, el = null) {\n      const rootEls = (el || document).querySelectorAll('[x-data]');\n      Array.from(rootEls).filter(el => el.__x === undefined).forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    listenForNewUninitializedComponentsAtRunTime: function listenForNewUninitializedComponentsAtRunTime() {\n      const targetNode = document.querySelector('body');\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        if (this.pauseMutationObserver) return;\n\n        for (let i = 0; i < mutations.length; i++) {\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              // Discard non-element nodes (like line-breaks)\n              if (node.nodeType !== 1) return; // Discard any changes happening within an existing component.\n              // They will take care of themselves.\n\n              if (node.parentElement && node.parentElement.closest('[x-data]')) return;\n              this.discoverUninitializedComponents(el => {\n                this.initializeComponent(el);\n              }, node.parentElement);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    },\n    initializeComponent: function initializeComponent(el) {\n      if (!el.__x) {\n        // Wrap in a try/catch so that we don't prevent other components\n        // from initializing when one component contains an error.\n        try {\n          el.__x = new Component(el);\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          }, 0);\n        }\n      }\n    },\n    clone: function clone(component, newEl) {\n      if (!newEl.__x) {\n        newEl.__x = new Component(newEl, component);\n      }\n    },\n    addMagicProperty: function addMagicProperty(name, callback) {\n      this.magicProperties[name] = callback;\n    },\n    onComponentInitialized: function onComponentInitialized(callback) {\n      this.onComponentInitializeds.push(callback);\n    },\n    onBeforeComponentInitialized: function onBeforeComponentInitialized(callback) {\n      this.onBeforeComponentInitializeds.push(callback);\n    }\n  };\n\n  if (!isTesting()) {\n    window.Alpine = Alpine;\n\n    if (window.deferLoadingAlpine) {\n      window.deferLoadingAlpine(function () {\n        window.Alpine.start();\n      });\n    } else {\n      window.Alpine.start();\n    }\n  }\n\n  return Alpine;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpinejs/dist/alpine.js\n");

/***/ }),

/***/ "./assets/js/src/app.js":
/*!******************************!*\
  !*** ./assets/js/src/app.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var alpine_magic_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alpine-magic-helpers */ \"./node_modules/alpine-magic-helpers/dist/index.js\");\n/* harmony import */ var alpine_magic_helpers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(alpine_magic_helpers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/alpine.js\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(alpinejs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router.js */ \"./assets/js/src/router.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers.js */ \"./assets/js/src/helpers.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_helpers_js__WEBPACK_IMPORTED_MODULE_3__);\n//\n// Vendor\n//\n\n //\n// Router\n//\n\n //\n// Helpers\n//\n\n //\n// Root Alpine Instance\n//\n\nwindow.rootAlpineInstance = function () {\n  return {\n    sidebar: {\n      active: null,\n      isShow: false\n    },\n    init: function init() {\n      window.addEventListener('load', function () {\n        return new _router_js__WEBPACK_IMPORTED_MODULE_2__.default();\n      });\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZG1pbi10ZW1wbGF0ZS8uL2Fzc2V0cy9qcy9zcmMvYXBwLmpzP2E2YzgiXSwibmFtZXMiOlsid2luZG93Iiwicm9vdEFscGluZUluc3RhbmNlIiwic2lkZWJhciIsImFjdGl2ZSIsImlzU2hvdyIsImluaXQiLCJhZGRFdmVudExpc3RlbmVyIiwiUm91dGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0NBR0E7QUFDQTtBQUNBOztDQUdBO0FBQ0E7QUFDQTs7Q0FHQTtBQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBQ0Msa0JBQVAsR0FBNEIsWUFBTTtBQUM5QixTQUFPO0FBQ0hDLFdBQU8sRUFBRTtBQUNMQyxZQUFNLEVBQUUsSUFESDtBQUVMQyxZQUFNLEVBQUU7QUFGSCxLQUROO0FBTUhDLFFBTkcsa0JBTUk7QUFDSEwsWUFBTSxDQUFDTSxnQkFBUCxDQUF3QixNQUF4QixFQUFnQztBQUFBLGVBQU0sSUFBSUMsK0NBQUosRUFBTjtBQUFBLE9BQWhDO0FBQ0g7QUFSRSxHQUFQO0FBVUgsQ0FYRCIsImZpbGUiOiIuL2Fzc2V0cy9qcy9zcmMvYXBwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIFZlbmRvclxuLy9cbmltcG9ydCAnYWxwaW5lLW1hZ2ljLWhlbHBlcnMnO1xuaW1wb3J0ICdhbHBpbmVqcyc7XG5cbi8vXG4vLyBSb3V0ZXJcbi8vXG5pbXBvcnQgUm91dGVyIGZyb20gJy4vcm91dGVyLmpzJztcblxuLy9cbi8vIEhlbHBlcnNcbi8vXG5pbXBvcnQgJy4vaGVscGVycy5qcyc7XG5cbi8vXG4vLyBSb290IEFscGluZSBJbnN0YW5jZVxuLy9cbndpbmRvdy5yb290QWxwaW5lSW5zdGFuY2UgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2lkZWJhcjoge1xuICAgICAgICAgICAgYWN0aXZlOiBudWxsLFxuICAgICAgICAgICAgaXNTaG93OiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IG5ldyBSb3V0ZXIoKSApO1xuICAgICAgICB9XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/src/app.js\n");

/***/ }),

/***/ "./assets/js/src/helpers.js":
/*!**********************************!*\
  !*** ./assets/js/src/helpers.js ***!
  \**********************************/
/***/ (() => {

eval("window.helpers = {};\n\nwindow.helpers.goTop = function () {\n  var smooth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  document.documentElement.scrollTo({\n    top: 0,\n    behavior: smooth ? 'smooth' : 'auto'\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZG1pbi10ZW1wbGF0ZS8uL2Fzc2V0cy9qcy9zcmMvaGVscGVycy5qcz8xNTI3Il0sIm5hbWVzIjpbIndpbmRvdyIsImhlbHBlcnMiLCJnb1RvcCIsInNtb290aCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG8iLCJ0b3AiLCJiZWhhdmlvciJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixFQUFqQjs7QUFFQUQsTUFBTSxDQUFDQyxPQUFQLENBQWVDLEtBQWYsR0FBdUIsWUFBbUI7QUFBQSxNQUFsQkMsTUFBa0IsdUVBQVQsSUFBUztBQUN0Q0MsRUFBQUEsUUFBUSxDQUFDQyxlQUFULENBQXlCQyxRQUF6QixDQUFrQztBQUM5QkMsSUFBQUEsR0FBRyxFQUFFLENBRHlCO0FBRTlCQyxJQUFBQSxRQUFRLEVBQUVMLE1BQU0sR0FBRyxRQUFILEdBQWM7QUFGQSxHQUFsQztBQUlILENBTEQiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuaGVscGVycyA9IHt9O1xuXG53aW5kb3cuaGVscGVycy5nb1RvcCA9IChzbW9vdGggPSB0cnVlKSA9PiB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvKHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBiZWhhdmlvcjogc21vb3RoID8gJ3Ntb290aCcgOiAnYXV0bydcbiAgICB9KTtcbn07Il0sImZpbGUiOiIuL2Fzc2V0cy9qcy9zcmMvaGVscGVycy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/src/helpers.js\n");

/***/ }),

/***/ "./assets/js/src/router.js":
/*!*********************************!*\
  !*** ./assets/js/src/router.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Router)\n/* harmony export */ });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Router = /*#__PURE__*/function () {\n  function Router() {\n    _classCallCheck(this, Router);\n\n    this.containerId = 'content-container';\n    this.containerWrapperId = 'content-container-wrapper';\n    this.container = this.getContainer();\n    this.containerWrapper = document.getElementById(this.containerWrapperId);\n    this.links = document.querySelectorAll('a[data-fetch-url]');\n    var url = location.href.replace(new RegExp(\"\\/$\", \"g\"), ''); // 去除最後的 '/'，因 href 屬性會自動在根目錄加上 '/'\n\n    this.handleRouter();\n    this.handlePageUI(url);\n  }\n\n  _createClass(Router, [{\n    key: \"getContainer\",\n    value: function getContainer() {\n      return document.getElementById(this.containerId);\n    }\n  }, {\n    key: \"handleRouter\",\n    value: function handleRouter() {\n      var _this = this;\n\n      [].forEach.call(this.links, function (link) {\n        link.addEventListener('click', function (e) {\n          e.preventDefault();\n          var url = e.target.href;\n          url = url.replace(new RegExp(\"\\/$\", \"g\"), ''); // 去除最後的 '/'，因 href 屬性會自動在根目錄加上 '/'\n\n          window.history.pushState({}, null, url);\n\n          _this.loadContent(url);\n\n          _this.handlePageUI(url);\n        });\n      });\n    }\n  }, {\n    key: \"loadContent\",\n    value: function loadContent(url) {\n      var _this2 = this;\n\n      fetch(url, {\n        'cache': 'no-cache',\n        'headers': {\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      }).then(function (response) {\n        if (!response.ok) {\n          throw new Error('頁面請求發生錯誤');\n        }\n\n        return response.text();\n      }).then(function (html) {\n        var parser = new DOMParser();\n        var content = parser.parseFromString(html, 'text/html').getElementById('content-container');\n\n        _this2.habdleFadeEffect().then(function () {\n          _this2.container.replaceWith(content);\n\n          _this2.container = _this2.getContainer(); // 轉換 container\n\n          _this2.executeScripts();\n        });\n      })[\"catch\"](function (error) {\n        alert(error.message);\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"executeScripts\",\n    value: function executeScripts() {\n      var _this3 = this;\n\n      var scriptTags = this.container.getElementsByTagName('script');\n\n      if (scriptTags.length == 0) {\n        return;\n      }\n\n      var embedScripts = null;\n      var inlineScripts = '';\n      [].forEach.call(scriptTags, function (scriptTag) {\n        if (scriptTag.src != '') {\n          // Embed scripts\n          var tag = document.createElement('script');\n          tag.src = scriptTag.src;\n          tag.dataset.override = true;\n\n          _this3.container.appendChild(tag);\n\n          embedScripts = true;\n        } else {\n          // Inline scripts\n          inlineScripts += scriptTag.innerText;\n        }\n      }); // 執行 Inline script\n\n      if (inlineScripts) {\n        if (!embedScripts) {\n          excuteInlineScripts(inlineScripts);\n        } else {\n          // 等最後一個 embed script 完成載入時，再執行腳本\n          var lastestScript = this.container.lastElementChild;\n\n          lastestScript.onload = function () {\n            excuteInlineScripts(inlineScripts);\n          };\n        }\n      } // 刪除已複製的 Embed scripts\n\n\n      [].forEach.call(scriptTags, function (scriptTag) {\n        if (!scriptTag.dataset.override) scriptTag.parentNode.removeChild(scriptTag);\n      });\n\n      function excuteInlineScripts(inlineScripts) {\n        new Function(inlineScripts)();\n      }\n    }\n  }, {\n    key: \"handlePageUI\",\n    value: function handlePageUI(url) {\n      // page scroll to top;\n      window.helpers.goTop(false); // change alpine components data outside\n\n      document.body.__x.$data.sidebar.isShow = false;\n      document.body.__x.$data.sidebar.active = url;\n    }\n  }, {\n    key: \"habdleFadeEffect\",\n    value: function habdleFadeEffect() {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        var loader = document.getElementById('loader');\n        loader.classList.add('is-show');\n\n        _this4.containerWrapper.classList.remove('is-show');\n\n        _this4.containerWrapper.ontransitionend = function (e) {\n          if (!_this4.containerWrapper.classList.contains('is-show')) {\n            loader.classList.remove('is-show');\n\n            _this4.containerWrapper.classList.add('is-show');\n\n            resolve();\n          }\n        };\n      });\n    }\n  }]);\n\n  return Router;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/src/router.js\n");

/***/ }),

/***/ "./assets/css/src/app.css":
/*!********************************!*\
  !*** ./assets/css/src/app.css ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hZG1pbi10ZW1wbGF0ZS8uL2Fzc2V0cy9jc3Mvc3JjL2FwcC5jc3M/N2ZhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJmaWxlIjoiLi9hc3NldHMvY3NzL3NyYy9hcHAuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/css/src/app.css\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					result = fn();
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/assets/js/dist/app": 0,
/******/ 			"assets/css/dist/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkadmin_template"] = self["webpackChunkadmin_template"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["assets/css/dist/app"], () => (__webpack_require__("./assets/js/src/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["assets/css/dist/app"], () => (__webpack_require__("./assets/css/src/app.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;